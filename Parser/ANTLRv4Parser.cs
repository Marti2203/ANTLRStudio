//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ANTLRv4Parser.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;
namespace ANTLRStudio.Parser
{
    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
    [System.CLSCompliant(false)]
    public partial class ANTLRv4Parser : Antlr4.Runtime.Parser
    {
        protected static DFA[] decisionToDFA;
        protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
        public const int
            TOKEN_REF = 1, RULE_REF = 2, LEXER_CHAR_SET = 3, DOC_COMMENT = 4, BLOCK_COMMENT = 5,
            LINE_COMMENT = 6, INT = 7, STRING_LITERAL = 8, UNTERMINATED_STRING_LITERAL = 9,
            BEGIN_ARGUMENT = 10, BEGIN_ACTION = 11, OPTIONS = 12, TOKENS = 13, CHANNELS = 14,
            IMPORT = 15, FRAGMENT = 16, LEXER = 17, PARSER = 18, GRAMMAR = 19, PROTECTED = 20,
            PUBLIC = 21, PRIVATE = 22, RETURNS = 23, LOCALS = 24, THROWS = 25, CATCH = 26, FINALLY = 27,
            MODE = 28, COLON = 29, COLONCOLON = 30, COMMA = 31, SEMI = 32, LPAREN = 33, RPAREN = 34,
            LBRACE = 35, RBRACE = 36, RARROW = 37, LT = 38, GT = 39, ASSIGN = 40, QUESTION = 41,
            STAR = 42, PLUS_ASSIGN = 43, PLUS = 44, OR = 45, DOLLAR = 46, RANGE = 47, DOT = 48,
            AT = 49, POUND = 50, NOT = 51, ID = 52, WS = 53, ERRCHAR = 54, END_ARGUMENT = 55, UNTERMINATED_ARGUMENT = 56,
            ARGUMENT_CONTENT = 57, END_ACTION = 58, UNTERMINATED_ACTION = 59, ACTION_CONTENT = 60,
            UNTERMINATED_CHAR_SET = 61;
        public const int
            RULE_grammarSpec = 0, RULE_grammarDecl = 1, RULE_grammarType = 2, RULE_prequelConstruct = 3,
            RULE_optionsSpec = 4, RULE_option = 5, RULE_optionValue = 6, RULE_delegateGrammars = 7,
            RULE_delegateGrammar = 8, RULE_tokensSpec = 9, RULE_channelsSpec = 10,
            RULE_idList = 11, RULE_action_ = 12, RULE_actionScopeName = 13, RULE_actionBlock = 14,
            RULE_argActionBlock = 15, RULE_modeSpec = 16, RULE_rules = 17, RULE_ruleSpec = 18,
            RULE_parserRuleSpec = 19, RULE_exceptionGroup = 20, RULE_exceptionHandler = 21,
            RULE_finallyClause = 22, RULE_rulePrequel = 23, RULE_ruleReturns = 24,
            RULE_throwsSpec = 25, RULE_localsSpec = 26, RULE_ruleAction = 27, RULE_ruleModifiers = 28,
            RULE_ruleModifier = 29, RULE_ruleBlock = 30, RULE_ruleAltList = 31, RULE_labeledAlt = 32,
            RULE_lexerRuleSpec = 33, RULE_lexerRuleBlock = 34, RULE_lexerAltList = 35,
            RULE_lexerAlt = 36, RULE_lexerElements = 37, RULE_lexerElement = 38, RULE_labeledLexerElement = 39,
            RULE_lexerBlock = 40, RULE_lexerCommands = 41, RULE_lexerCommand = 42,
            RULE_lexerCommandName = 43, RULE_lexerCommandExpr = 44, RULE_altList = 45,
            RULE_alternative = 46, RULE_element = 47, RULE_labeledElement = 48, RULE_ebnf = 49,
            RULE_blockSuffix = 50, RULE_ebnfSuffix = 51, RULE_lexerAtom = 52, RULE_atom = 53,
            RULE_notSet = 54, RULE_blockSet = 55, RULE_setElement = 56, RULE_block = 57,
            RULE_ruleref = 58, RULE_characterRange = 59, RULE_terminal = 60, RULE_elementOptions = 61,
            RULE_elementOption = 62, RULE_identifier = 63;
        public static readonly string[] ruleNames = {
        "grammarSpec", "grammarDecl", "grammarType", "prequelConstruct", "optionsSpec",
        "option", "optionValue", "delegateGrammars", "delegateGrammar", "tokensSpec",
        "channelsSpec", "idList", "action_", "actionScopeName", "actionBlock",
        "argActionBlock", "modeSpec", "rules", "ruleSpec", "parserRuleSpec", "exceptionGroup",
        "exceptionHandler", "finallyClause", "rulePrequel", "ruleReturns", "throwsSpec",
        "localsSpec", "ruleAction", "ruleModifiers", "ruleModifier", "ruleBlock",
        "ruleAltList", "labeledAlt", "lexerRuleSpec", "lexerRuleBlock", "lexerAltList",
        "lexerAlt", "lexerElements", "lexerElement", "labeledLexerElement", "lexerBlock",
        "lexerCommands", "lexerCommand", "lexerCommandName", "lexerCommandExpr",
        "altList", "alternative", "element", "labeledElement", "ebnf", "blockSuffix",
        "ebnfSuffix", "lexerAtom", "atom", "notSet", "blockSet", "setElement",
        "block", "ruleref", "characterRange", "terminal", "elementOptions", "elementOption",
        "identifier"
    };

        private static readonly string[] _LiteralNames = {
        null, null, null, null, null, null, null, null, null, null, null, null,
        "'options'", "'tokens'", "'channels'", "'import'", "'fragment'", "'lexer'",
        "'parser'", "'grammar'", "'protected'", "'public'", "'private'", "'returns'",
        "'locals'", "'throws'", "'catch'", "'finally'", "'mode'"
    };
        private static readonly string[] _SymbolicNames = {
        null, "TOKEN_REF", "RULE_REF", "LEXER_CHAR_SET", "DOC_COMMENT", "BLOCK_COMMENT",
        "LINE_COMMENT", "INT", "STRING_LITERAL", "UNTERMINATED_STRING_LITERAL",
        "BEGIN_ARGUMENT", "BEGIN_ACTION", "OPTIONS", "TOKENS", "CHANNELS", "IMPORT",
        "FRAGMENT", "LEXER", "PARSER", "GRAMMAR", "PROTECTED", "PUBLIC", "PRIVATE",
        "RETURNS", "LOCALS", "THROWS", "CATCH", "FINALLY", "MODE", "COLON", "COLONCOLON",
        "COMMA", "SEMI", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "RARROW", "LT",
        "GT", "ASSIGN", "QUESTION", "STAR", "PLUS_ASSIGN", "PLUS", "OR", "DOLLAR",
        "RANGE", "DOT", "AT", "POUND", "NOT", "ID", "WS", "ERRCHAR", "END_ARGUMENT",
        "UNTERMINATED_ARGUMENT", "ARGUMENT_CONTENT", "END_ACTION", "UNTERMINATED_ACTION",
        "ACTION_CONTENT", "UNTERMINATED_CHAR_SET"
    };
        public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

        [NotNull]
        public override IVocabulary Vocabulary
        {
            get
            {
                return DefaultVocabulary;
            }
        }

        public override string GrammarFileName { get { return "ANTLRv4Parser.g4"; } }

        public override string[] RuleNames { get { return ruleNames; } }

        public override string SerializedAtn { get { return new string(_serializedATN); } }

        static ANTLRv4Parser()
        {
            decisionToDFA = new DFA[_ATN.NumberOfDecisions];
            for (int i = 0; i < _ATN.NumberOfDecisions; i++)
            {
                decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
            }
        }

        public ANTLRv4Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

        public ANTLRv4Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
        : base(input, output, errorOutput)
        {
            Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
        }

        public partial class GrammarSpecContext : ParserRuleContext
        {
            public GrammarDeclContext grammarDecl()
            {
                return GetRuleContext<GrammarDeclContext>(0);
            }
            public RulesContext rules()
            {
                return GetRuleContext<RulesContext>(0);
            }
            public ITerminalNode Eof() { return GetToken(ANTLRv4Parser.Eof, 0); }
            public ITerminalNode[] DOC_COMMENT() { return GetTokens(ANTLRv4Parser.DOC_COMMENT); }
            public ITerminalNode DOC_COMMENT(int i)
            {
                return GetToken(ANTLRv4Parser.DOC_COMMENT, i);
            }
            public PrequelConstructContext[] prequelConstruct()
            {
                return GetRuleContexts<PrequelConstructContext>();
            }
            public PrequelConstructContext prequelConstruct(int i)
            {
                return GetRuleContext<PrequelConstructContext>(i);
            }
            public ModeSpecContext[] modeSpec()
            {
                return GetRuleContexts<ModeSpecContext>();
            }
            public ModeSpecContext modeSpec(int i)
            {
                return GetRuleContext<ModeSpecContext>(i);
            }
            public GrammarSpecContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_grammarSpec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterGrammarSpec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitGrammarSpec(this);
            }
        }

        [RuleVersion(0)]
        public GrammarSpecContext grammarSpec()
        {
            GrammarSpecContext _localctx = new GrammarSpecContext(Context, State);
            EnterRule(_localctx, 0, RULE_grammarSpec);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 131;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == DOC_COMMENT)
                    {
                        {
                            {
                                State = 128; Match(DOC_COMMENT);
                            }
                        }
                        State = 133;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 134; grammarDecl();
                    State = 138;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << TOKENS) | (1L << CHANNELS) | (1L << IMPORT) | (1L << AT))) != 0))
                    {
                        {
                            {
                                State = 135; prequelConstruct();
                            }
                        }
                        State = 140;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 141; rules();
                    State = 145;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == MODE)
                    {
                        {
                            {
                                State = 142; modeSpec();
                            }
                        }
                        State = 147;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 148; Match(Eof);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GrammarDeclContext : ParserRuleContext
        {
            public GrammarTypeContext grammarType()
            {
                return GetRuleContext<GrammarTypeContext>(0);
            }
            public IdentifierContext identifier()
            {
                return GetRuleContext<IdentifierContext>(0);
            }
            public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
            public GrammarDeclContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_grammarDecl; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterGrammarDecl(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitGrammarDecl(this);
            }
        }

        [RuleVersion(0)]
        public GrammarDeclContext grammarDecl()
        {
            GrammarDeclContext _localctx = new GrammarDeclContext(Context, State);
            EnterRule(_localctx, 2, RULE_grammarDecl);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 150; grammarType();
                    State = 151; identifier();
                    State = 152; Match(SEMI);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GrammarTypeContext : ParserRuleContext
        {
            public ITerminalNode LEXER() { return GetToken(ANTLRv4Parser.LEXER, 0); }
            public ITerminalNode GRAMMAR() { return GetToken(ANTLRv4Parser.GRAMMAR, 0); }
            public ITerminalNode PARSER() { return GetToken(ANTLRv4Parser.PARSER, 0); }
            public GrammarTypeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_grammarType; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterGrammarType(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitGrammarType(this);
            }
        }

        [RuleVersion(0)]
        public GrammarTypeContext grammarType()
        {
            GrammarTypeContext _localctx = new GrammarTypeContext(Context, State);
            EnterRule(_localctx, 4, RULE_grammarType);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 159;
                    ErrorHandler.Sync(this);
                    switch (TokenStream.LA(1))
                    {
                        case LEXER:
                            {
                                State = 154; Match(LEXER);
                                State = 155; Match(GRAMMAR);
                            }
                            break;
                        case PARSER:
                            {
                                State = 156; Match(PARSER);
                                State = 157; Match(GRAMMAR);
                            }
                            break;
                        case GRAMMAR:
                            {
                                State = 158; Match(GRAMMAR);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PrequelConstructContext : ParserRuleContext
        {
            public OptionsSpecContext optionsSpec()
            {
                return GetRuleContext<OptionsSpecContext>(0);
            }
            public DelegateGrammarsContext delegateGrammars()
            {
                return GetRuleContext<DelegateGrammarsContext>(0);
            }
            public TokensSpecContext tokensSpec()
            {
                return GetRuleContext<TokensSpecContext>(0);
            }
            public ChannelsSpecContext channelsSpec()
            {
                return GetRuleContext<ChannelsSpecContext>(0);
            }
            public Action_Context action_()
            {
                return GetRuleContext<Action_Context>(0);
            }
            public PrequelConstructContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_prequelConstruct; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterPrequelConstruct(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitPrequelConstruct(this);
            }
        }

        [RuleVersion(0)]
        public PrequelConstructContext prequelConstruct()
        {
            PrequelConstructContext _localctx = new PrequelConstructContext(Context, State);
            EnterRule(_localctx, 6, RULE_prequelConstruct);
            try
            {
                State = 166;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case OPTIONS:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 161; optionsSpec();
                        }
                        break;
                    case IMPORT:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 162; delegateGrammars();
                        }
                        break;
                    case TOKENS:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 163; tokensSpec();
                        }
                        break;
                    case CHANNELS:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 164; channelsSpec();
                        }
                        break;
                    case AT:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 165; action_();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OptionsSpecContext : ParserRuleContext
        {
            public ITerminalNode OPTIONS() { return GetToken(ANTLRv4Parser.OPTIONS, 0); }
            public ITerminalNode LBRACE() { return GetToken(ANTLRv4Parser.LBRACE, 0); }
            public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
            public OptionContext[] option()
            {
                return GetRuleContexts<OptionContext>();
            }
            public OptionContext option(int i)
            {
                return GetRuleContext<OptionContext>(i);
            }
            public ITerminalNode[] SEMI() { return GetTokens(ANTLRv4Parser.SEMI); }
            public ITerminalNode SEMI(int i)
            {
                return GetToken(ANTLRv4Parser.SEMI, i);
            }
            public OptionsSpecContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_optionsSpec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterOptionsSpec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitOptionsSpec(this);
            }
        }

        [RuleVersion(0)]
        public OptionsSpecContext optionsSpec()
        {
            OptionsSpecContext _localctx = new OptionsSpecContext(Context, State);
            EnterRule(_localctx, 8, RULE_optionsSpec);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 168; Match(OPTIONS);
                    State = 169; Match(LBRACE);
                    State = 175;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == TOKEN_REF || _la == RULE_REF)
                    {
                        {
                            {
                                State = 170; option();
                                State = 171; Match(SEMI);
                            }
                        }
                        State = 177;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 178; Match(RBRACE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OptionContext : ParserRuleContext
        {
            public IdentifierContext identifier()
            {
                return GetRuleContext<IdentifierContext>(0);
            }
            public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
            public OptionValueContext optionValue()
            {
                return GetRuleContext<OptionValueContext>(0);
            }
            public OptionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_option; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterOption(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitOption(this);
            }
        }

        [RuleVersion(0)]
        public OptionContext option()
        {
            OptionContext _localctx = new OptionContext(Context, State);
            EnterRule(_localctx, 10, RULE_option);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 180; identifier();
                    State = 181; Match(ASSIGN);
                    State = 182; optionValue();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OptionValueContext : ParserRuleContext
        {
            public IdentifierContext[] identifier()
            {
                return GetRuleContexts<IdentifierContext>();
            }
            public IdentifierContext identifier(int i)
            {
                return GetRuleContext<IdentifierContext>(i);
            }
            public ITerminalNode[] DOT() { return GetTokens(ANTLRv4Parser.DOT); }
            public ITerminalNode DOT(int i)
            {
                return GetToken(ANTLRv4Parser.DOT, i);
            }
            public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
            public ActionBlockContext actionBlock()
            {
                return GetRuleContext<ActionBlockContext>(0);
            }
            public ITerminalNode INT() { return GetToken(ANTLRv4Parser.INT, 0); }
            public OptionValueContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_optionValue; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterOptionValue(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitOptionValue(this);
            }
        }

        [RuleVersion(0)]
        public OptionValueContext optionValue()
        {
            OptionValueContext _localctx = new OptionValueContext(Context, State);
            EnterRule(_localctx, 12, RULE_optionValue);
            int _la;
            try
            {
                State = 195;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case TOKEN_REF:
                    case RULE_REF:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 184; identifier();
                            State = 189;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == DOT)
                            {
                                {
                                    {
                                        State = 185; Match(DOT);
                                        State = 186; identifier();
                                    }
                                }
                                State = 191;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                        }
                        break;
                    case STRING_LITERAL:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 192; Match(STRING_LITERAL);
                        }
                        break;
                    case BEGIN_ACTION:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 193; actionBlock();
                        }
                        break;
                    case INT:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 194; Match(INT);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DelegateGrammarsContext : ParserRuleContext
        {
            public ITerminalNode IMPORT() { return GetToken(ANTLRv4Parser.IMPORT, 0); }
            public DelegateGrammarContext[] delegateGrammar()
            {
                return GetRuleContexts<DelegateGrammarContext>();
            }
            public DelegateGrammarContext delegateGrammar(int i)
            {
                return GetRuleContext<DelegateGrammarContext>(i);
            }
            public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
            public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
            public ITerminalNode COMMA(int i)
            {
                return GetToken(ANTLRv4Parser.COMMA, i);
            }
            public DelegateGrammarsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_delegateGrammars; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterDelegateGrammars(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitDelegateGrammars(this);
            }
        }

        [RuleVersion(0)]
        public DelegateGrammarsContext delegateGrammars()
        {
            DelegateGrammarsContext _localctx = new DelegateGrammarsContext(Context, State);
            EnterRule(_localctx, 14, RULE_delegateGrammars);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 197; Match(IMPORT);
                    State = 198; delegateGrammar();
                    State = 203;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == COMMA)
                    {
                        {
                            {
                                State = 199; Match(COMMA);
                                State = 200; delegateGrammar();
                            }
                        }
                        State = 205;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 206; Match(SEMI);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DelegateGrammarContext : ParserRuleContext
        {
            public IdentifierContext[] identifier()
            {
                return GetRuleContexts<IdentifierContext>();
            }
            public IdentifierContext identifier(int i)
            {
                return GetRuleContext<IdentifierContext>(i);
            }
            public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
            public DelegateGrammarContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_delegateGrammar; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterDelegateGrammar(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitDelegateGrammar(this);
            }
        }

        [RuleVersion(0)]
        public DelegateGrammarContext delegateGrammar()
        {
            DelegateGrammarContext _localctx = new DelegateGrammarContext(Context, State);
            EnterRule(_localctx, 16, RULE_delegateGrammar);
            try
            {
                State = 213;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 9, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 208; identifier();
                            State = 209; Match(ASSIGN);
                            State = 210; identifier();
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 212; identifier();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TokensSpecContext : ParserRuleContext
        {
            public ITerminalNode TOKENS() { return GetToken(ANTLRv4Parser.TOKENS, 0); }
            public ITerminalNode LBRACE() { return GetToken(ANTLRv4Parser.LBRACE, 0); }
            public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
            public IdListContext idList()
            {
                return GetRuleContext<IdListContext>(0);
            }
            public TokensSpecContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_tokensSpec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterTokensSpec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitTokensSpec(this);
            }
        }

        [RuleVersion(0)]
        public TokensSpecContext tokensSpec()
        {
            TokensSpecContext _localctx = new TokensSpecContext(Context, State);
            EnterRule(_localctx, 18, RULE_tokensSpec);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 215; Match(TOKENS);
                    State = 216; Match(LBRACE);
                    State = 218;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == TOKEN_REF || _la == RULE_REF)
                    {
                        {
                            State = 217; idList();
                        }
                    }

                    State = 220; Match(RBRACE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ChannelsSpecContext : ParserRuleContext
        {
            public ITerminalNode CHANNELS() { return GetToken(ANTLRv4Parser.CHANNELS, 0); }
            public ITerminalNode LBRACE() { return GetToken(ANTLRv4Parser.LBRACE, 0); }
            public ITerminalNode RBRACE() { return GetToken(ANTLRv4Parser.RBRACE, 0); }
            public IdListContext idList()
            {
                return GetRuleContext<IdListContext>(0);
            }
            public ChannelsSpecContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_channelsSpec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterChannelsSpec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitChannelsSpec(this);
            }
        }

        [RuleVersion(0)]
        public ChannelsSpecContext channelsSpec()
        {
            ChannelsSpecContext _localctx = new ChannelsSpecContext(Context, State);
            EnterRule(_localctx, 20, RULE_channelsSpec);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 222; Match(CHANNELS);
                    State = 223; Match(LBRACE);
                    State = 225;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == TOKEN_REF || _la == RULE_REF)
                    {
                        {
                            State = 224; idList();
                        }
                    }

                    State = 227; Match(RBRACE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IdListContext : ParserRuleContext
        {
            public IdentifierContext[] identifier()
            {
                return GetRuleContexts<IdentifierContext>();
            }
            public IdentifierContext identifier(int i)
            {
                return GetRuleContext<IdentifierContext>(i);
            }
            public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
            public ITerminalNode COMMA(int i)
            {
                return GetToken(ANTLRv4Parser.COMMA, i);
            }
            public IdListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_idList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterIdList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitIdList(this);
            }
        }

        [RuleVersion(0)]
        public IdListContext idList()
        {
            IdListContext _localctx = new IdListContext(Context, State);
            EnterRule(_localctx, 22, RULE_idList);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 229; identifier();
                    State = 234;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 12, Context);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 230; Match(COMMA);
                                    State = 231; identifier();
                                }
                            }
                        }
                        State = 236;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 12, Context);
                    }
                    State = 238;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == COMMA)
                    {
                        {
                            State = 237; Match(COMMA);
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class Action_Context : ParserRuleContext
        {
            public ITerminalNode AT() { return GetToken(ANTLRv4Parser.AT, 0); }
            public IdentifierContext identifier()
            {
                return GetRuleContext<IdentifierContext>(0);
            }
            public ActionBlockContext actionBlock()
            {
                return GetRuleContext<ActionBlockContext>(0);
            }
            public ActionScopeNameContext actionScopeName()
            {
                return GetRuleContext<ActionScopeNameContext>(0);
            }
            public ITerminalNode COLONCOLON() { return GetToken(ANTLRv4Parser.COLONCOLON, 0); }
            public Action_Context(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_action_; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterAction_(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitAction_(this);
            }
        }

        [RuleVersion(0)]
        public Action_Context action_()
        {
            Action_Context _localctx = new Action_Context(Context, State);
            EnterRule(_localctx, 24, RULE_action_);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 240; Match(AT);
                    State = 244;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 14, Context))
                    {
                        case 1:
                            {
                                State = 241; actionScopeName();
                                State = 242; Match(COLONCOLON);
                            }
                            break;
                    }
                    State = 246; identifier();
                    State = 247; actionBlock();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ActionScopeNameContext : ParserRuleContext
        {
            public IdentifierContext identifier()
            {
                return GetRuleContext<IdentifierContext>(0);
            }
            public ITerminalNode LEXER() { return GetToken(ANTLRv4Parser.LEXER, 0); }
            public ITerminalNode PARSER() { return GetToken(ANTLRv4Parser.PARSER, 0); }
            public ActionScopeNameContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_actionScopeName; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterActionScopeName(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitActionScopeName(this);
            }
        }

        [RuleVersion(0)]
        public ActionScopeNameContext actionScopeName()
        {
            ActionScopeNameContext _localctx = new ActionScopeNameContext(Context, State);
            EnterRule(_localctx, 26, RULE_actionScopeName);
            try
            {
                State = 252;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case TOKEN_REF:
                    case RULE_REF:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 249; identifier();
                        }
                        break;
                    case LEXER:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 250; Match(LEXER);
                        }
                        break;
                    case PARSER:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 251; Match(PARSER);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ActionBlockContext : ParserRuleContext
        {
            public ITerminalNode BEGIN_ACTION() { return GetToken(ANTLRv4Parser.BEGIN_ACTION, 0); }
            public ITerminalNode END_ACTION() { return GetToken(ANTLRv4Parser.END_ACTION, 0); }
            public ITerminalNode[] ACTION_CONTENT() { return GetTokens(ANTLRv4Parser.ACTION_CONTENT); }
            public ITerminalNode ACTION_CONTENT(int i)
            {
                return GetToken(ANTLRv4Parser.ACTION_CONTENT, i);
            }
            public ActionBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_actionBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterActionBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitActionBlock(this);
            }
        }

        [RuleVersion(0)]
        public ActionBlockContext actionBlock()
        {
            ActionBlockContext _localctx = new ActionBlockContext(Context, State);
            EnterRule(_localctx, 28, RULE_actionBlock);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 254; Match(BEGIN_ACTION);
                    State = 258;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == ACTION_CONTENT)
                    {
                        {
                            {
                                State = 255; Match(ACTION_CONTENT);
                            }
                        }
                        State = 260;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 261; Match(END_ACTION);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgActionBlockContext : ParserRuleContext
        {
            public ITerminalNode BEGIN_ARGUMENT() { return GetToken(ANTLRv4Parser.BEGIN_ARGUMENT, 0); }
            public ITerminalNode END_ARGUMENT() { return GetToken(ANTLRv4Parser.END_ARGUMENT, 0); }
            public ITerminalNode[] ARGUMENT_CONTENT() { return GetTokens(ANTLRv4Parser.ARGUMENT_CONTENT); }
            public ITerminalNode ARGUMENT_CONTENT(int i)
            {
                return GetToken(ANTLRv4Parser.ARGUMENT_CONTENT, i);
            }
            public ArgActionBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argActionBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterArgActionBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitArgActionBlock(this);
            }
        }

        [RuleVersion(0)]
        public ArgActionBlockContext argActionBlock()
        {
            ArgActionBlockContext _localctx = new ArgActionBlockContext(Context, State);
            EnterRule(_localctx, 30, RULE_argActionBlock);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 263; Match(BEGIN_ARGUMENT);
                    State = 267;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == ARGUMENT_CONTENT)
                    {
                        {
                            {
                                State = 264; Match(ARGUMENT_CONTENT);
                            }
                        }
                        State = 269;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 270; Match(END_ARGUMENT);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModeSpecContext : ParserRuleContext
        {
            public ITerminalNode MODE() { return GetToken(ANTLRv4Parser.MODE, 0); }
            public IdentifierContext identifier()
            {
                return GetRuleContext<IdentifierContext>(0);
            }
            public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
            public LexerRuleSpecContext[] lexerRuleSpec()
            {
                return GetRuleContexts<LexerRuleSpecContext>();
            }
            public LexerRuleSpecContext lexerRuleSpec(int i)
            {
                return GetRuleContext<LexerRuleSpecContext>(i);
            }
            public ModeSpecContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_modeSpec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterModeSpec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitModeSpec(this);
            }
        }

        [RuleVersion(0)]
        public ModeSpecContext modeSpec()
        {
            ModeSpecContext _localctx = new ModeSpecContext(Context, State);
            EnterRule(_localctx, 32, RULE_modeSpec);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 272; Match(MODE);
                    State = 273; identifier();
                    State = 274; Match(SEMI);
                    State = 278;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << DOC_COMMENT) | (1L << FRAGMENT))) != 0))
                    {
                        {
                            {
                                State = 275; lexerRuleSpec();
                            }
                        }
                        State = 280;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RulesContext : ParserRuleContext
        {
            public RuleSpecContext[] ruleSpec()
            {
                return GetRuleContexts<RuleSpecContext>();
            }
            public RuleSpecContext ruleSpec(int i)
            {
                return GetRuleContext<RuleSpecContext>(i);
            }
            public RulesContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_rules; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterRules(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitRules(this);
            }
        }

        [RuleVersion(0)]
        public RulesContext rules()
        {
            RulesContext _localctx = new RulesContext(Context, State);
            EnterRule(_localctx, 34, RULE_rules);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 284;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << DOC_COMMENT) | (1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0))
                    {
                        {
                            {
                                State = 281; ruleSpec();
                            }
                        }
                        State = 286;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RuleSpecContext : ParserRuleContext
        {
            public ParserRuleSpecContext parserRuleSpec()
            {
                return GetRuleContext<ParserRuleSpecContext>(0);
            }
            public LexerRuleSpecContext lexerRuleSpec()
            {
                return GetRuleContext<LexerRuleSpecContext>(0);
            }
            public RuleSpecContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ruleSpec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterRuleSpec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitRuleSpec(this);
            }
        }

        [RuleVersion(0)]
        public RuleSpecContext ruleSpec()
        {
            RuleSpecContext _localctx = new RuleSpecContext(Context, State);
            EnterRule(_localctx, 36, RULE_ruleSpec);
            try
            {
                State = 289;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 20, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 287; parserRuleSpec();
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 288; lexerRuleSpec();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ParserRuleSpecContext : ParserRuleContext
        {
            public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
            public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
            public RuleBlockContext ruleBlock()
            {
                return GetRuleContext<RuleBlockContext>(0);
            }
            public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
            public ExceptionGroupContext exceptionGroup()
            {
                return GetRuleContext<ExceptionGroupContext>(0);
            }
            public ITerminalNode[] DOC_COMMENT() { return GetTokens(ANTLRv4Parser.DOC_COMMENT); }
            public ITerminalNode DOC_COMMENT(int i)
            {
                return GetToken(ANTLRv4Parser.DOC_COMMENT, i);
            }
            public RuleModifiersContext ruleModifiers()
            {
                return GetRuleContext<RuleModifiersContext>(0);
            }
            public ArgActionBlockContext argActionBlock()
            {
                return GetRuleContext<ArgActionBlockContext>(0);
            }
            public RuleReturnsContext ruleReturns()
            {
                return GetRuleContext<RuleReturnsContext>(0);
            }
            public ThrowsSpecContext throwsSpec()
            {
                return GetRuleContext<ThrowsSpecContext>(0);
            }
            public LocalsSpecContext localsSpec()
            {
                return GetRuleContext<LocalsSpecContext>(0);
            }
            public RulePrequelContext[] rulePrequel()
            {
                return GetRuleContexts<RulePrequelContext>();
            }
            public RulePrequelContext rulePrequel(int i)
            {
                return GetRuleContext<RulePrequelContext>(i);
            }
            public ParserRuleSpecContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_parserRuleSpec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterParserRuleSpec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitParserRuleSpec(this);
            }
        }

        [RuleVersion(0)]
        public ParserRuleSpecContext parserRuleSpec()
        {
            ParserRuleSpecContext _localctx = new ParserRuleSpecContext(Context, State);
            EnterRule(_localctx, 38, RULE_parserRuleSpec);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 294;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == DOC_COMMENT)
                    {
                        {
                            {
                                State = 291; Match(DOC_COMMENT);
                            }
                        }
                        State = 296;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 298;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0))
                    {
                        {
                            State = 297; ruleModifiers();
                        }
                    }

                    State = 300; Match(RULE_REF);
                    State = 302;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == BEGIN_ARGUMENT)
                    {
                        {
                            State = 301; argActionBlock();
                        }
                    }

                    State = 305;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == RETURNS)
                    {
                        {
                            State = 304; ruleReturns();
                        }
                    }

                    State = 308;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == THROWS)
                    {
                        {
                            State = 307; throwsSpec();
                        }
                    }

                    State = 311;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == LOCALS)
                    {
                        {
                            State = 310; localsSpec();
                        }
                    }

                    State = 316;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == OPTIONS || _la == AT)
                    {
                        {
                            {
                                State = 313; rulePrequel();
                            }
                        }
                        State = 318;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 319; Match(COLON);
                    State = 320; ruleBlock();
                    State = 321; Match(SEMI);
                    State = 322; exceptionGroup();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ExceptionGroupContext : ParserRuleContext
        {
            public ExceptionHandlerContext[] exceptionHandler()
            {
                return GetRuleContexts<ExceptionHandlerContext>();
            }
            public ExceptionHandlerContext exceptionHandler(int i)
            {
                return GetRuleContext<ExceptionHandlerContext>(i);
            }
            public FinallyClauseContext finallyClause()
            {
                return GetRuleContext<FinallyClauseContext>(0);
            }
            public ExceptionGroupContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_exceptionGroup; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterExceptionGroup(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitExceptionGroup(this);
            }
        }

        [RuleVersion(0)]
        public ExceptionGroupContext exceptionGroup()
        {
            ExceptionGroupContext _localctx = new ExceptionGroupContext(Context, State);
            EnterRule(_localctx, 40, RULE_exceptionGroup);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 327;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == CATCH)
                    {
                        {
                            {
                                State = 324; exceptionHandler();
                            }
                        }
                        State = 329;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 331;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == FINALLY)
                    {
                        {
                            State = 330; finallyClause();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ExceptionHandlerContext : ParserRuleContext
        {
            public ITerminalNode CATCH() { return GetToken(ANTLRv4Parser.CATCH, 0); }
            public ArgActionBlockContext argActionBlock()
            {
                return GetRuleContext<ArgActionBlockContext>(0);
            }
            public ActionBlockContext actionBlock()
            {
                return GetRuleContext<ActionBlockContext>(0);
            }
            public ExceptionHandlerContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_exceptionHandler; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterExceptionHandler(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitExceptionHandler(this);
            }
        }

        [RuleVersion(0)]
        public ExceptionHandlerContext exceptionHandler()
        {
            ExceptionHandlerContext _localctx = new ExceptionHandlerContext(Context, State);
            EnterRule(_localctx, 42, RULE_exceptionHandler);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 333; Match(CATCH);
                    State = 334; argActionBlock();
                    State = 335; actionBlock();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FinallyClauseContext : ParserRuleContext
        {
            public ITerminalNode FINALLY() { return GetToken(ANTLRv4Parser.FINALLY, 0); }
            public ActionBlockContext actionBlock()
            {
                return GetRuleContext<ActionBlockContext>(0);
            }
            public FinallyClauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_finallyClause; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterFinallyClause(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitFinallyClause(this);
            }
        }

        [RuleVersion(0)]
        public FinallyClauseContext finallyClause()
        {
            FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
            EnterRule(_localctx, 44, RULE_finallyClause);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 337; Match(FINALLY);
                    State = 338; actionBlock();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RulePrequelContext : ParserRuleContext
        {
            public OptionsSpecContext optionsSpec()
            {
                return GetRuleContext<OptionsSpecContext>(0);
            }
            public RuleActionContext ruleAction()
            {
                return GetRuleContext<RuleActionContext>(0);
            }
            public RulePrequelContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_rulePrequel; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterRulePrequel(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitRulePrequel(this);
            }
        }

        [RuleVersion(0)]
        public RulePrequelContext rulePrequel()
        {
            RulePrequelContext _localctx = new RulePrequelContext(Context, State);
            EnterRule(_localctx, 46, RULE_rulePrequel);
            try
            {
                State = 342;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case OPTIONS:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 340; optionsSpec();
                        }
                        break;
                    case AT:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 341; ruleAction();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RuleReturnsContext : ParserRuleContext
        {
            public ITerminalNode RETURNS() { return GetToken(ANTLRv4Parser.RETURNS, 0); }
            public ArgActionBlockContext argActionBlock()
            {
                return GetRuleContext<ArgActionBlockContext>(0);
            }
            public RuleReturnsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ruleReturns; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterRuleReturns(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitRuleReturns(this);
            }
        }

        [RuleVersion(0)]
        public RuleReturnsContext ruleReturns()
        {
            RuleReturnsContext _localctx = new RuleReturnsContext(Context, State);
            EnterRule(_localctx, 48, RULE_ruleReturns);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 344; Match(RETURNS);
                    State = 345; argActionBlock();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ThrowsSpecContext : ParserRuleContext
        {
            public ITerminalNode THROWS() { return GetToken(ANTLRv4Parser.THROWS, 0); }
            public IdentifierContext[] identifier()
            {
                return GetRuleContexts<IdentifierContext>();
            }
            public IdentifierContext identifier(int i)
            {
                return GetRuleContext<IdentifierContext>(i);
            }
            public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
            public ITerminalNode COMMA(int i)
            {
                return GetToken(ANTLRv4Parser.COMMA, i);
            }
            public ThrowsSpecContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_throwsSpec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterThrowsSpec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitThrowsSpec(this);
            }
        }

        [RuleVersion(0)]
        public ThrowsSpecContext throwsSpec()
        {
            ThrowsSpecContext _localctx = new ThrowsSpecContext(Context, State);
            EnterRule(_localctx, 50, RULE_throwsSpec);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 347; Match(THROWS);
                    State = 348; identifier();
                    State = 353;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == COMMA)
                    {
                        {
                            {
                                State = 349; Match(COMMA);
                                State = 350; identifier();
                            }
                        }
                        State = 355;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LocalsSpecContext : ParserRuleContext
        {
            public ITerminalNode LOCALS() { return GetToken(ANTLRv4Parser.LOCALS, 0); }
            public ArgActionBlockContext argActionBlock()
            {
                return GetRuleContext<ArgActionBlockContext>(0);
            }
            public LocalsSpecContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_localsSpec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLocalsSpec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLocalsSpec(this);
            }
        }

        [RuleVersion(0)]
        public LocalsSpecContext localsSpec()
        {
            LocalsSpecContext _localctx = new LocalsSpecContext(Context, State);
            EnterRule(_localctx, 52, RULE_localsSpec);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 356; Match(LOCALS);
                    State = 357; argActionBlock();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RuleActionContext : ParserRuleContext
        {
            public ITerminalNode AT() { return GetToken(ANTLRv4Parser.AT, 0); }
            public IdentifierContext identifier()
            {
                return GetRuleContext<IdentifierContext>(0);
            }
            public ActionBlockContext actionBlock()
            {
                return GetRuleContext<ActionBlockContext>(0);
            }
            public RuleActionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ruleAction; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterRuleAction(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitRuleAction(this);
            }
        }

        [RuleVersion(0)]
        public RuleActionContext ruleAction()
        {
            RuleActionContext _localctx = new RuleActionContext(Context, State);
            EnterRule(_localctx, 54, RULE_ruleAction);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 359; Match(AT);
                    State = 360; identifier();
                    State = 361; actionBlock();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RuleModifiersContext : ParserRuleContext
        {
            public RuleModifierContext[] ruleModifier()
            {
                return GetRuleContexts<RuleModifierContext>();
            }
            public RuleModifierContext ruleModifier(int i)
            {
                return GetRuleContext<RuleModifierContext>(i);
            }
            public RuleModifiersContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ruleModifiers; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterRuleModifiers(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitRuleModifiers(this);
            }
        }

        [RuleVersion(0)]
        public RuleModifiersContext ruleModifiers()
        {
            RuleModifiersContext _localctx = new RuleModifiersContext(Context, State);
            EnterRule(_localctx, 56, RULE_ruleModifiers);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 364;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    do
                    {
                        {
                            {
                                State = 363; ruleModifier();
                            }
                        }
                        State = 366;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    } while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0));
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RuleModifierContext : ParserRuleContext
        {
            public ITerminalNode PUBLIC() { return GetToken(ANTLRv4Parser.PUBLIC, 0); }
            public ITerminalNode PRIVATE() { return GetToken(ANTLRv4Parser.PRIVATE, 0); }
            public ITerminalNode PROTECTED() { return GetToken(ANTLRv4Parser.PROTECTED, 0); }
            public ITerminalNode FRAGMENT() { return GetToken(ANTLRv4Parser.FRAGMENT, 0); }
            public RuleModifierContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ruleModifier; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterRuleModifier(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitRuleModifier(this);
            }
        }

        [RuleVersion(0)]
        public RuleModifierContext ruleModifier()
        {
            RuleModifierContext _localctx = new RuleModifierContext(Context, State);
            EnterRule(_localctx, 58, RULE_ruleModifier);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 368;
                    _la = TokenStream.LA(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FRAGMENT) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << PRIVATE))) != 0)))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RuleBlockContext : ParserRuleContext
        {
            public RuleAltListContext ruleAltList()
            {
                return GetRuleContext<RuleAltListContext>(0);
            }
            public RuleBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ruleBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterRuleBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitRuleBlock(this);
            }
        }

        [RuleVersion(0)]
        public RuleBlockContext ruleBlock()
        {
            RuleBlockContext _localctx = new RuleBlockContext(Context, State);
            EnterRule(_localctx, 60, RULE_ruleBlock);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 370; ruleAltList();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RuleAltListContext : ParserRuleContext
        {
            public LabeledAltContext[] labeledAlt()
            {
                return GetRuleContexts<LabeledAltContext>();
            }
            public LabeledAltContext labeledAlt(int i)
            {
                return GetRuleContext<LabeledAltContext>(i);
            }
            public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
            public ITerminalNode OR(int i)
            {
                return GetToken(ANTLRv4Parser.OR, i);
            }
            public RuleAltListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ruleAltList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterRuleAltList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitRuleAltList(this);
            }
        }

        [RuleVersion(0)]
        public RuleAltListContext ruleAltList()
        {
            RuleAltListContext _localctx = new RuleAltListContext(Context, State);
            EnterRule(_localctx, 62, RULE_ruleAltList);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 372; labeledAlt();
                    State = 377;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == OR)
                    {
                        {
                            {
                                State = 373; Match(OR);
                                State = 374; labeledAlt();
                            }
                        }
                        State = 379;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LabeledAltContext : ParserRuleContext
        {
            public AlternativeContext alternative()
            {
                return GetRuleContext<AlternativeContext>(0);
            }
            public ITerminalNode POUND() { return GetToken(ANTLRv4Parser.POUND, 0); }
            public IdentifierContext identifier()
            {
                return GetRuleContext<IdentifierContext>(0);
            }
            public LabeledAltContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_labeledAlt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLabeledAlt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLabeledAlt(this);
            }
        }

        [RuleVersion(0)]
        public LabeledAltContext labeledAlt()
        {
            LabeledAltContext _localctx = new LabeledAltContext(Context, State);
            EnterRule(_localctx, 64, RULE_labeledAlt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 380; alternative();
                    State = 383;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == POUND)
                    {
                        {
                            State = 381; Match(POUND);
                            State = 382; identifier();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LexerRuleSpecContext : ParserRuleContext
        {
            public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
            public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
            public LexerRuleBlockContext lexerRuleBlock()
            {
                return GetRuleContext<LexerRuleBlockContext>(0);
            }
            public ITerminalNode SEMI() { return GetToken(ANTLRv4Parser.SEMI, 0); }
            public ITerminalNode[] DOC_COMMENT() { return GetTokens(ANTLRv4Parser.DOC_COMMENT); }
            public ITerminalNode DOC_COMMENT(int i)
            {
                return GetToken(ANTLRv4Parser.DOC_COMMENT, i);
            }
            public ITerminalNode FRAGMENT() { return GetToken(ANTLRv4Parser.FRAGMENT, 0); }
            public LexerRuleSpecContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lexerRuleSpec; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLexerRuleSpec(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLexerRuleSpec(this);
            }
        }

        [RuleVersion(0)]
        public LexerRuleSpecContext lexerRuleSpec()
        {
            LexerRuleSpecContext _localctx = new LexerRuleSpecContext(Context, State);
            EnterRule(_localctx, 66, RULE_lexerRuleSpec);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 388;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == DOC_COMMENT)
                    {
                        {
                            {
                                State = 385; Match(DOC_COMMENT);
                            }
                        }
                        State = 390;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 392;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == FRAGMENT)
                    {
                        {
                            State = 391; Match(FRAGMENT);
                        }
                    }

                    State = 394; Match(TOKEN_REF);
                    State = 395; Match(COLON);
                    State = 396; lexerRuleBlock();
                    State = 397; Match(SEMI);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LexerRuleBlockContext : ParserRuleContext
        {
            public LexerAltListContext lexerAltList()
            {
                return GetRuleContext<LexerAltListContext>(0);
            }
            public LexerRuleBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lexerRuleBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLexerRuleBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLexerRuleBlock(this);
            }
        }

        [RuleVersion(0)]
        public LexerRuleBlockContext lexerRuleBlock()
        {
            LexerRuleBlockContext _localctx = new LexerRuleBlockContext(Context, State);
            EnterRule(_localctx, 68, RULE_lexerRuleBlock);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 399; lexerAltList();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LexerAltListContext : ParserRuleContext
        {
            public LexerAltContext[] lexerAlt()
            {
                return GetRuleContexts<LexerAltContext>();
            }
            public LexerAltContext lexerAlt(int i)
            {
                return GetRuleContext<LexerAltContext>(i);
            }
            public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
            public ITerminalNode OR(int i)
            {
                return GetToken(ANTLRv4Parser.OR, i);
            }
            public LexerAltListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lexerAltList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLexerAltList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLexerAltList(this);
            }
        }

        [RuleVersion(0)]
        public LexerAltListContext lexerAltList()
        {
            LexerAltListContext _localctx = new LexerAltListContext(Context, State);
            EnterRule(_localctx, 70, RULE_lexerAltList);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 401; lexerAlt();
                    State = 406;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == OR)
                    {
                        {
                            {
                                State = 402; Match(OR);
                                State = 403; lexerAlt();
                            }
                        }
                        State = 408;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LexerAltContext : ParserRuleContext
        {
            public LexerElementsContext lexerElements()
            {
                return GetRuleContext<LexerElementsContext>(0);
            }
            public LexerCommandsContext lexerCommands()
            {
                return GetRuleContext<LexerCommandsContext>(0);
            }
            public LexerAltContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lexerAlt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLexerAlt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLexerAlt(this);
            }
        }

        [RuleVersion(0)]
        public LexerAltContext lexerAlt()
        {
            LexerAltContext _localctx = new LexerAltContext(Context, State);
            EnterRule(_localctx, 72, RULE_lexerAlt);
            int _la;
            try
            {
                State = 414;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case TOKEN_REF:
                    case RULE_REF:
                    case LEXER_CHAR_SET:
                    case STRING_LITERAL:
                    case BEGIN_ACTION:
                    case LPAREN:
                    case DOT:
                    case NOT:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 409; lexerElements();
                            State = 411;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == RARROW)
                            {
                                {
                                    State = 410; lexerCommands();
                                }
                            }

                        }
                        break;
                    case SEMI:
                    case RPAREN:
                    case OR:
                        EnterOuterAlt(_localctx, 2);
                        {
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LexerElementsContext : ParserRuleContext
        {
            public LexerElementContext[] lexerElement()
            {
                return GetRuleContexts<LexerElementContext>();
            }
            public LexerElementContext lexerElement(int i)
            {
                return GetRuleContext<LexerElementContext>(i);
            }
            public LexerElementsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lexerElements; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLexerElements(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLexerElements(this);
            }
        }

        [RuleVersion(0)]
        public LexerElementsContext lexerElements()
        {
            LexerElementsContext _localctx = new LexerElementsContext(Context, State);
            EnterRule(_localctx, 74, RULE_lexerElements);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 417;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    do
                    {
                        {
                            {
                                State = 416; lexerElement();
                            }
                        }
                        State = 419;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    } while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << LEXER_CHAR_SET) | (1L << STRING_LITERAL) | (1L << BEGIN_ACTION) | (1L << LPAREN) | (1L << DOT) | (1L << NOT))) != 0));
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LexerElementContext : ParserRuleContext
        {
            public LabeledLexerElementContext labeledLexerElement()
            {
                return GetRuleContext<LabeledLexerElementContext>(0);
            }
            public EbnfSuffixContext ebnfSuffix()
            {
                return GetRuleContext<EbnfSuffixContext>(0);
            }
            public LexerAtomContext lexerAtom()
            {
                return GetRuleContext<LexerAtomContext>(0);
            }
            public LexerBlockContext lexerBlock()
            {
                return GetRuleContext<LexerBlockContext>(0);
            }
            public ActionBlockContext actionBlock()
            {
                return GetRuleContext<ActionBlockContext>(0);
            }
            public ITerminalNode QUESTION() { return GetToken(ANTLRv4Parser.QUESTION, 0); }
            public LexerElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lexerElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLexerElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLexerElement(this);
            }
        }

        [RuleVersion(0)]
        public LexerElementContext lexerElement()
        {
            LexerElementContext _localctx = new LexerElementContext(Context, State);
            EnterRule(_localctx, 76, RULE_lexerElement);
            int _la;
            try
            {
                State = 437;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 45, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 421; labeledLexerElement();
                            State = 423;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0))
                            {
                                {
                                    State = 422; ebnfSuffix();
                                }
                            }

                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 425; lexerAtom();
                            State = 427;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0))
                            {
                                {
                                    State = 426; ebnfSuffix();
                                }
                            }

                        }
                        break;
                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 429; lexerBlock();
                            State = 431;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0))
                            {
                                {
                                    State = 430; ebnfSuffix();
                                }
                            }

                        }
                        break;
                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 433; actionBlock();
                            State = 435;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == QUESTION)
                            {
                                {
                                    State = 434; Match(QUESTION);
                                }
                            }

                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LabeledLexerElementContext : ParserRuleContext
        {
            public IdentifierContext identifier()
            {
                return GetRuleContext<IdentifierContext>(0);
            }
            public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
            public ITerminalNode PLUS_ASSIGN() { return GetToken(ANTLRv4Parser.PLUS_ASSIGN, 0); }
            public LexerAtomContext lexerAtom()
            {
                return GetRuleContext<LexerAtomContext>(0);
            }
            public LexerBlockContext lexerBlock()
            {
                return GetRuleContext<LexerBlockContext>(0);
            }
            public LabeledLexerElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_labeledLexerElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLabeledLexerElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLabeledLexerElement(this);
            }
        }

        [RuleVersion(0)]
        public LabeledLexerElementContext labeledLexerElement()
        {
            LabeledLexerElementContext _localctx = new LabeledLexerElementContext(Context, State);
            EnterRule(_localctx, 78, RULE_labeledLexerElement);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 439; identifier();
                    State = 440;
                    _la = TokenStream.LA(1);
                    if (!(_la == ASSIGN || _la == PLUS_ASSIGN))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                    State = 443;
                    ErrorHandler.Sync(this);
                    switch (TokenStream.LA(1))
                    {
                        case TOKEN_REF:
                        case LEXER_CHAR_SET:
                        case STRING_LITERAL:
                        case DOT:
                        case NOT:
                            {
                                State = 441; lexerAtom();
                            }
                            break;
                        case LPAREN:
                            {
                                State = 442; lexerBlock();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LexerBlockContext : ParserRuleContext
        {
            public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
            public LexerAltListContext lexerAltList()
            {
                return GetRuleContext<LexerAltListContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
            public LexerBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lexerBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLexerBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLexerBlock(this);
            }
        }

        [RuleVersion(0)]
        public LexerBlockContext lexerBlock()
        {
            LexerBlockContext _localctx = new LexerBlockContext(Context, State);
            EnterRule(_localctx, 80, RULE_lexerBlock);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 445; Match(LPAREN);
                    State = 446; lexerAltList();
                    State = 447; Match(RPAREN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LexerCommandsContext : ParserRuleContext
        {
            public ITerminalNode RARROW() { return GetToken(ANTLRv4Parser.RARROW, 0); }
            public LexerCommandContext[] lexerCommand()
            {
                return GetRuleContexts<LexerCommandContext>();
            }
            public LexerCommandContext lexerCommand(int i)
            {
                return GetRuleContext<LexerCommandContext>(i);
            }
            public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
            public ITerminalNode COMMA(int i)
            {
                return GetToken(ANTLRv4Parser.COMMA, i);
            }
            public LexerCommandsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lexerCommands; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLexerCommands(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLexerCommands(this);
            }
        }

        [RuleVersion(0)]
        public LexerCommandsContext lexerCommands()
        {
            LexerCommandsContext _localctx = new LexerCommandsContext(Context, State);
            EnterRule(_localctx, 82, RULE_lexerCommands);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 449; Match(RARROW);
                    State = 450; lexerCommand();
                    State = 455;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == COMMA)
                    {
                        {
                            {
                                State = 451; Match(COMMA);
                                State = 452; lexerCommand();
                            }
                        }
                        State = 457;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LexerCommandContext : ParserRuleContext
        {
            public LexerCommandNameContext lexerCommandName()
            {
                return GetRuleContext<LexerCommandNameContext>(0);
            }
            public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
            public LexerCommandExprContext lexerCommandExpr()
            {
                return GetRuleContext<LexerCommandExprContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
            public LexerCommandContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lexerCommand; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLexerCommand(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLexerCommand(this);
            }
        }

        [RuleVersion(0)]
        public LexerCommandContext lexerCommand()
        {
            LexerCommandContext _localctx = new LexerCommandContext(Context, State);
            EnterRule(_localctx, 84, RULE_lexerCommand);
            try
            {
                State = 464;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 48, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 458; lexerCommandName();
                            State = 459; Match(LPAREN);
                            State = 460; lexerCommandExpr();
                            State = 461; Match(RPAREN);
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 463; lexerCommandName();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LexerCommandNameContext : ParserRuleContext
        {
            public IdentifierContext identifier()
            {
                return GetRuleContext<IdentifierContext>(0);
            }
            public ITerminalNode MODE() { return GetToken(ANTLRv4Parser.MODE, 0); }
            public LexerCommandNameContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lexerCommandName; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLexerCommandName(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLexerCommandName(this);
            }
        }

        [RuleVersion(0)]
        public LexerCommandNameContext lexerCommandName()
        {
            LexerCommandNameContext _localctx = new LexerCommandNameContext(Context, State);
            EnterRule(_localctx, 86, RULE_lexerCommandName);
            try
            {
                State = 468;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case TOKEN_REF:
                    case RULE_REF:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 466; identifier();
                        }
                        break;
                    case MODE:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 467; Match(MODE);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LexerCommandExprContext : ParserRuleContext
        {
            public IdentifierContext identifier()
            {
                return GetRuleContext<IdentifierContext>(0);
            }
            public ITerminalNode INT() { return GetToken(ANTLRv4Parser.INT, 0); }
            public LexerCommandExprContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lexerCommandExpr; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLexerCommandExpr(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLexerCommandExpr(this);
            }
        }

        [RuleVersion(0)]
        public LexerCommandExprContext lexerCommandExpr()
        {
            LexerCommandExprContext _localctx = new LexerCommandExprContext(Context, State);
            EnterRule(_localctx, 88, RULE_lexerCommandExpr);
            try
            {
                State = 472;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case TOKEN_REF:
                    case RULE_REF:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 470; identifier();
                        }
                        break;
                    case INT:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 471; Match(INT);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AltListContext : ParserRuleContext
        {
            public AlternativeContext[] alternative()
            {
                return GetRuleContexts<AlternativeContext>();
            }
            public AlternativeContext alternative(int i)
            {
                return GetRuleContext<AlternativeContext>(i);
            }
            public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
            public ITerminalNode OR(int i)
            {
                return GetToken(ANTLRv4Parser.OR, i);
            }
            public AltListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_altList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterAltList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitAltList(this);
            }
        }

        [RuleVersion(0)]
        public AltListContext altList()
        {
            AltListContext _localctx = new AltListContext(Context, State);
            EnterRule(_localctx, 90, RULE_altList);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 474; alternative();
                    State = 479;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == OR)
                    {
                        {
                            {
                                State = 475; Match(OR);
                                State = 476; alternative();
                            }
                        }
                        State = 481;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AlternativeContext : ParserRuleContext
        {
            public ElementOptionsContext elementOptions()
            {
                return GetRuleContext<ElementOptionsContext>(0);
            }
            public ElementContext[] element()
            {
                return GetRuleContexts<ElementContext>();
            }
            public ElementContext element(int i)
            {
                return GetRuleContext<ElementContext>(i);
            }
            public AlternativeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_alternative; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterAlternative(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitAlternative(this);
            }
        }

        [RuleVersion(0)]
        public AlternativeContext alternative()
        {
            AlternativeContext _localctx = new AlternativeContext(Context, State);
            EnterRule(_localctx, 92, RULE_alternative);
            int _la;
            try
            {
                State = 491;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case TOKEN_REF:
                    case RULE_REF:
                    case STRING_LITERAL:
                    case BEGIN_ACTION:
                    case LPAREN:
                    case LT:
                    case DOT:
                    case NOT:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 483;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == LT)
                            {
                                {
                                    State = 482; elementOptions();
                                }
                            }

                            State = 486;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            do
                            {
                                {
                                    {
                                        State = 485; element();
                                    }
                                }
                                State = 488;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            } while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOKEN_REF) | (1L << RULE_REF) | (1L << STRING_LITERAL) | (1L << BEGIN_ACTION) | (1L << LPAREN) | (1L << DOT) | (1L << NOT))) != 0));
                        }
                        break;
                    case SEMI:
                    case RPAREN:
                    case OR:
                    case POUND:
                        EnterOuterAlt(_localctx, 2);
                        {
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ElementContext : ParserRuleContext
        {
            public LabeledElementContext labeledElement()
            {
                return GetRuleContext<LabeledElementContext>(0);
            }
            public EbnfSuffixContext ebnfSuffix()
            {
                return GetRuleContext<EbnfSuffixContext>(0);
            }
            public AtomContext atom()
            {
                return GetRuleContext<AtomContext>(0);
            }
            public EbnfContext ebnf()
            {
                return GetRuleContext<EbnfContext>(0);
            }
            public ActionBlockContext actionBlock()
            {
                return GetRuleContext<ActionBlockContext>(0);
            }
            public ITerminalNode QUESTION() { return GetToken(ANTLRv4Parser.QUESTION, 0); }
            public ElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_element; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitElement(this);
            }
        }

        [RuleVersion(0)]
        public ElementContext element()
        {
            ElementContext _localctx = new ElementContext(Context, State);
            EnterRule(_localctx, 94, RULE_element);
            int _la;
            try
            {
                State = 508;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 58, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 493; labeledElement();
                            State = 496;
                            ErrorHandler.Sync(this);
                            switch (TokenStream.LA(1))
                            {
                                case QUESTION:
                                case STAR:
                                case PLUS:
                                    {
                                        State = 494; ebnfSuffix();
                                    }
                                    break;
                                case TOKEN_REF:
                                case RULE_REF:
                                case STRING_LITERAL:
                                case BEGIN_ACTION:
                                case SEMI:
                                case LPAREN:
                                case RPAREN:
                                case OR:
                                case DOT:
                                case POUND:
                                case NOT:
                                    {
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 498; atom();
                            State = 501;
                            ErrorHandler.Sync(this);
                            switch (TokenStream.LA(1))
                            {
                                case QUESTION:
                                case STAR:
                                case PLUS:
                                    {
                                        State = 499; ebnfSuffix();
                                    }
                                    break;
                                case TOKEN_REF:
                                case RULE_REF:
                                case STRING_LITERAL:
                                case BEGIN_ACTION:
                                case SEMI:
                                case LPAREN:
                                case RPAREN:
                                case OR:
                                case DOT:
                                case POUND:
                                case NOT:
                                    {
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 503; ebnf();
                        }
                        break;
                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 504; actionBlock();
                            State = 506;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == QUESTION)
                            {
                                {
                                    State = 505; Match(QUESTION);
                                }
                            }

                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LabeledElementContext : ParserRuleContext
        {
            public IdentifierContext identifier()
            {
                return GetRuleContext<IdentifierContext>(0);
            }
            public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
            public ITerminalNode PLUS_ASSIGN() { return GetToken(ANTLRv4Parser.PLUS_ASSIGN, 0); }
            public AtomContext atom()
            {
                return GetRuleContext<AtomContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public LabeledElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_labeledElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLabeledElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLabeledElement(this);
            }
        }

        [RuleVersion(0)]
        public LabeledElementContext labeledElement()
        {
            LabeledElementContext _localctx = new LabeledElementContext(Context, State);
            EnterRule(_localctx, 96, RULE_labeledElement);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 510; identifier();
                    State = 511;
                    _la = TokenStream.LA(1);
                    if (!(_la == ASSIGN || _la == PLUS_ASSIGN))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                    State = 514;
                    ErrorHandler.Sync(this);
                    switch (TokenStream.LA(1))
                    {
                        case TOKEN_REF:
                        case RULE_REF:
                        case STRING_LITERAL:
                        case DOT:
                        case NOT:
                            {
                                State = 512; atom();
                            }
                            break;
                        case LPAREN:
                            {
                                State = 513; block();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EbnfContext : ParserRuleContext
        {
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public BlockSuffixContext blockSuffix()
            {
                return GetRuleContext<BlockSuffixContext>(0);
            }
            public EbnfContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ebnf; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterEbnf(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitEbnf(this);
            }
        }

        [RuleVersion(0)]
        public EbnfContext ebnf()
        {
            EbnfContext _localctx = new EbnfContext(Context, State);
            EnterRule(_localctx, 98, RULE_ebnf);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 516; block();
                    State = 518;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QUESTION) | (1L << STAR) | (1L << PLUS))) != 0))
                    {
                        {
                            State = 517; blockSuffix();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BlockSuffixContext : ParserRuleContext
        {
            public EbnfSuffixContext ebnfSuffix()
            {
                return GetRuleContext<EbnfSuffixContext>(0);
            }
            public BlockSuffixContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_blockSuffix; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterBlockSuffix(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitBlockSuffix(this);
            }
        }

        [RuleVersion(0)]
        public BlockSuffixContext blockSuffix()
        {
            BlockSuffixContext _localctx = new BlockSuffixContext(Context, State);
            EnterRule(_localctx, 100, RULE_blockSuffix);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 520; ebnfSuffix();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EbnfSuffixContext : ParserRuleContext
        {
            public ITerminalNode[] QUESTION() { return GetTokens(ANTLRv4Parser.QUESTION); }
            public ITerminalNode QUESTION(int i)
            {
                return GetToken(ANTLRv4Parser.QUESTION, i);
            }
            public ITerminalNode STAR() { return GetToken(ANTLRv4Parser.STAR, 0); }
            public ITerminalNode PLUS() { return GetToken(ANTLRv4Parser.PLUS, 0); }
            public EbnfSuffixContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ebnfSuffix; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterEbnfSuffix(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitEbnfSuffix(this);
            }
        }

        [RuleVersion(0)]
        public EbnfSuffixContext ebnfSuffix()
        {
            EbnfSuffixContext _localctx = new EbnfSuffixContext(Context, State);
            EnterRule(_localctx, 102, RULE_ebnfSuffix);
            int _la;
            try
            {
                State = 534;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case QUESTION:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 522; Match(QUESTION);
                            State = 524;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == QUESTION)
                            {
                                {
                                    State = 523; Match(QUESTION);
                                }
                            }

                        }
                        break;
                    case STAR:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 526; Match(STAR);
                            State = 528;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == QUESTION)
                            {
                                {
                                    State = 527; Match(QUESTION);
                                }
                            }

                        }
                        break;
                    case PLUS:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 530; Match(PLUS);
                            State = 532;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == QUESTION)
                            {
                                {
                                    State = 531; Match(QUESTION);
                                }
                            }

                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LexerAtomContext : ParserRuleContext
        {
            public CharacterRangeContext characterRange()
            {
                return GetRuleContext<CharacterRangeContext>(0);
            }
            public TerminalContext terminal()
            {
                return GetRuleContext<TerminalContext>(0);
            }
            public NotSetContext notSet()
            {
                return GetRuleContext<NotSetContext>(0);
            }
            public ITerminalNode LEXER_CHAR_SET() { return GetToken(ANTLRv4Parser.LEXER_CHAR_SET, 0); }
            public ITerminalNode DOT() { return GetToken(ANTLRv4Parser.DOT, 0); }
            public ElementOptionsContext elementOptions()
            {
                return GetRuleContext<ElementOptionsContext>(0);
            }
            public LexerAtomContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lexerAtom; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterLexerAtom(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitLexerAtom(this);
            }
        }

        [RuleVersion(0)]
        public LexerAtomContext lexerAtom()
        {
            LexerAtomContext _localctx = new LexerAtomContext(Context, State);
            EnterRule(_localctx, 104, RULE_lexerAtom);
            int _la;
            try
            {
                State = 544;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 66, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 536; characterRange();
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 537; terminal();
                        }
                        break;
                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 538; notSet();
                        }
                        break;
                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 539; Match(LEXER_CHAR_SET);
                        }
                        break;
                    case 5:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 540; Match(DOT);
                            State = 542;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == LT)
                            {
                                {
                                    State = 541; elementOptions();
                                }
                            }

                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AtomContext : ParserRuleContext
        {
            public TerminalContext terminal()
            {
                return GetRuleContext<TerminalContext>(0);
            }
            public RulerefContext ruleref()
            {
                return GetRuleContext<RulerefContext>(0);
            }
            public NotSetContext notSet()
            {
                return GetRuleContext<NotSetContext>(0);
            }
            public ITerminalNode DOT() { return GetToken(ANTLRv4Parser.DOT, 0); }
            public ElementOptionsContext elementOptions()
            {
                return GetRuleContext<ElementOptionsContext>(0);
            }
            public AtomContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_atom; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterAtom(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitAtom(this);
            }
        }

        [RuleVersion(0)]
        public AtomContext atom()
        {
            AtomContext _localctx = new AtomContext(Context, State);
            EnterRule(_localctx, 106, RULE_atom);
            int _la;
            try
            {
                State = 553;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case TOKEN_REF:
                    case STRING_LITERAL:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 546; terminal();
                        }
                        break;
                    case RULE_REF:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 547; ruleref();
                        }
                        break;
                    case NOT:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 548; notSet();
                        }
                        break;
                    case DOT:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 549; Match(DOT);
                            State = 551;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == LT)
                            {
                                {
                                    State = 550; elementOptions();
                                }
                            }

                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class NotSetContext : ParserRuleContext
        {
            public ITerminalNode NOT() { return GetToken(ANTLRv4Parser.NOT, 0); }
            public SetElementContext setElement()
            {
                return GetRuleContext<SetElementContext>(0);
            }
            public BlockSetContext blockSet()
            {
                return GetRuleContext<BlockSetContext>(0);
            }
            public NotSetContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_notSet; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterNotSet(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitNotSet(this);
            }
        }

        [RuleVersion(0)]
        public NotSetContext notSet()
        {
            NotSetContext _localctx = new NotSetContext(Context, State);
            EnterRule(_localctx, 108, RULE_notSet);
            try
            {
                State = 559;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 69, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 555; Match(NOT);
                            State = 556; setElement();
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 557; Match(NOT);
                            State = 558; blockSet();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BlockSetContext : ParserRuleContext
        {
            public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
            public SetElementContext[] setElement()
            {
                return GetRuleContexts<SetElementContext>();
            }
            public SetElementContext setElement(int i)
            {
                return GetRuleContext<SetElementContext>(i);
            }
            public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
            public ITerminalNode[] OR() { return GetTokens(ANTLRv4Parser.OR); }
            public ITerminalNode OR(int i)
            {
                return GetToken(ANTLRv4Parser.OR, i);
            }
            public BlockSetContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_blockSet; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterBlockSet(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitBlockSet(this);
            }
        }

        [RuleVersion(0)]
        public BlockSetContext blockSet()
        {
            BlockSetContext _localctx = new BlockSetContext(Context, State);
            EnterRule(_localctx, 110, RULE_blockSet);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 561; Match(LPAREN);
                    State = 562; setElement();
                    State = 567;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == OR)
                    {
                        {
                            {
                                State = 563; Match(OR);
                                State = 564; setElement();
                            }
                        }
                        State = 569;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 570; Match(RPAREN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SetElementContext : ParserRuleContext
        {
            public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
            public ElementOptionsContext elementOptions()
            {
                return GetRuleContext<ElementOptionsContext>(0);
            }
            public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
            public CharacterRangeContext characterRange()
            {
                return GetRuleContext<CharacterRangeContext>(0);
            }
            public ITerminalNode LEXER_CHAR_SET() { return GetToken(ANTLRv4Parser.LEXER_CHAR_SET, 0); }
            public SetElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_setElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterSetElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitSetElement(this);
            }
        }

        [RuleVersion(0)]
        public SetElementContext setElement()
        {
            SetElementContext _localctx = new SetElementContext(Context, State);
            EnterRule(_localctx, 112, RULE_setElement);
            int _la;
            try
            {
                State = 582;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 73, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 572; Match(TOKEN_REF);
                            State = 574;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == LT)
                            {
                                {
                                    State = 573; elementOptions();
                                }
                            }

                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 576; Match(STRING_LITERAL);
                            State = 578;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == LT)
                            {
                                {
                                    State = 577; elementOptions();
                                }
                            }

                        }
                        break;
                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 580; characterRange();
                        }
                        break;
                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 581; Match(LEXER_CHAR_SET);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BlockContext : ParserRuleContext
        {
            public ITerminalNode LPAREN() { return GetToken(ANTLRv4Parser.LPAREN, 0); }
            public AltListContext altList()
            {
                return GetRuleContext<AltListContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(ANTLRv4Parser.RPAREN, 0); }
            public ITerminalNode COLON() { return GetToken(ANTLRv4Parser.COLON, 0); }
            public OptionsSpecContext optionsSpec()
            {
                return GetRuleContext<OptionsSpecContext>(0);
            }
            public RuleActionContext[] ruleAction()
            {
                return GetRuleContexts<RuleActionContext>();
            }
            public RuleActionContext ruleAction(int i)
            {
                return GetRuleContext<RuleActionContext>(i);
            }
            public BlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_block; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitBlock(this);
            }
        }

        [RuleVersion(0)]
        public BlockContext block()
        {
            BlockContext _localctx = new BlockContext(Context, State);
            EnterRule(_localctx, 114, RULE_block);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 584; Match(LPAREN);
                    State = 595;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OPTIONS) | (1L << COLON) | (1L << AT))) != 0))
                    {
                        {
                            State = 586;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == OPTIONS)
                            {
                                {
                                    State = 585; optionsSpec();
                                }
                            }

                            State = 591;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == AT)
                            {
                                {
                                    {
                                        State = 588; ruleAction();
                                    }
                                }
                                State = 593;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                            State = 594; Match(COLON);
                        }
                    }

                    State = 597; altList();
                    State = 598; Match(RPAREN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RulerefContext : ParserRuleContext
        {
            public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
            public ArgActionBlockContext argActionBlock()
            {
                return GetRuleContext<ArgActionBlockContext>(0);
            }
            public ElementOptionsContext elementOptions()
            {
                return GetRuleContext<ElementOptionsContext>(0);
            }
            public RulerefContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ruleref; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterRuleref(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitRuleref(this);
            }
        }

        [RuleVersion(0)]
        public RulerefContext ruleref()
        {
            RulerefContext _localctx = new RulerefContext(Context, State);
            EnterRule(_localctx, 116, RULE_ruleref);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 600; Match(RULE_REF);
                    State = 602;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == BEGIN_ARGUMENT)
                    {
                        {
                            State = 601; argActionBlock();
                        }
                    }

                    State = 605;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    if (_la == LT)
                    {
                        {
                            State = 604; elementOptions();
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CharacterRangeContext : ParserRuleContext
        {
            public ITerminalNode[] STRING_LITERAL() { return GetTokens(ANTLRv4Parser.STRING_LITERAL); }
            public ITerminalNode STRING_LITERAL(int i)
            {
                return GetToken(ANTLRv4Parser.STRING_LITERAL, i);
            }
            public ITerminalNode RANGE() { return GetToken(ANTLRv4Parser.RANGE, 0); }
            public CharacterRangeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_characterRange; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterCharacterRange(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitCharacterRange(this);
            }
        }

        [RuleVersion(0)]
        public CharacterRangeContext characterRange()
        {
            CharacterRangeContext _localctx = new CharacterRangeContext(Context, State);
            EnterRule(_localctx, 118, RULE_characterRange);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 607; Match(STRING_LITERAL);
                    State = 608; Match(RANGE);
                    State = 609; Match(STRING_LITERAL);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TerminalContext : ParserRuleContext
        {
            public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
            public ElementOptionsContext elementOptions()
            {
                return GetRuleContext<ElementOptionsContext>(0);
            }
            public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
            public TerminalContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_terminal; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterTerminal(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitTerminal(this);
            }
        }

        [RuleVersion(0)]
        public TerminalContext terminal()
        {
            TerminalContext _localctx = new TerminalContext(Context, State);
            EnterRule(_localctx, 120, RULE_terminal);
            int _la;
            try
            {
                State = 619;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case TOKEN_REF:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 611; Match(TOKEN_REF);
                            State = 613;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == LT)
                            {
                                {
                                    State = 612; elementOptions();
                                }
                            }

                        }
                        break;
                    case STRING_LITERAL:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 615; Match(STRING_LITERAL);
                            State = 617;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == LT)
                            {
                                {
                                    State = 616; elementOptions();
                                }
                            }

                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ElementOptionsContext : ParserRuleContext
        {
            public ITerminalNode LT() { return GetToken(ANTLRv4Parser.LT, 0); }
            public ElementOptionContext[] elementOption()
            {
                return GetRuleContexts<ElementOptionContext>();
            }
            public ElementOptionContext elementOption(int i)
            {
                return GetRuleContext<ElementOptionContext>(i);
            }
            public ITerminalNode GT() { return GetToken(ANTLRv4Parser.GT, 0); }
            public ITerminalNode[] COMMA() { return GetTokens(ANTLRv4Parser.COMMA); }
            public ITerminalNode COMMA(int i)
            {
                return GetToken(ANTLRv4Parser.COMMA, i);
            }
            public ElementOptionsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_elementOptions; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterElementOptions(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitElementOptions(this);
            }
        }

        [RuleVersion(0)]
        public ElementOptionsContext elementOptions()
        {
            ElementOptionsContext _localctx = new ElementOptionsContext(Context, State);
            EnterRule(_localctx, 122, RULE_elementOptions);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 621; Match(LT);
                    State = 622; elementOption();
                    State = 627;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                    while (_la == COMMA)
                    {
                        {
                            {
                                State = 623; Match(COMMA);
                                State = 624; elementOption();
                            }
                        }
                        State = 629;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                    }
                    State = 630; Match(GT);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ElementOptionContext : ParserRuleContext
        {
            public IdentifierContext[] identifier()
            {
                return GetRuleContexts<IdentifierContext>();
            }
            public IdentifierContext identifier(int i)
            {
                return GetRuleContext<IdentifierContext>(i);
            }
            public ITerminalNode ASSIGN() { return GetToken(ANTLRv4Parser.ASSIGN, 0); }
            public ITerminalNode STRING_LITERAL() { return GetToken(ANTLRv4Parser.STRING_LITERAL, 0); }
            public ElementOptionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_elementOption; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterElementOption(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitElementOption(this);
            }
        }

        [RuleVersion(0)]
        public ElementOptionContext elementOption()
        {
            ElementOptionContext _localctx = new ElementOptionContext(Context, State);
            EnterRule(_localctx, 124, RULE_elementOption);
            try
            {
                State = 639;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 84, Context))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 632; identifier();
                        }
                        break;
                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 633; identifier();
                            State = 634; Match(ASSIGN);
                            State = 637;
                            ErrorHandler.Sync(this);
                            switch (TokenStream.LA(1))
                            {
                                case TOKEN_REF:
                                case RULE_REF:
                                    {
                                        State = 635; identifier();
                                    }
                                    break;
                                case STRING_LITERAL:
                                    {
                                        State = 636; Match(STRING_LITERAL);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IdentifierContext : ParserRuleContext
        {
            public ITerminalNode RULE_REF() { return GetToken(ANTLRv4Parser.RULE_REF, 0); }
            public ITerminalNode TOKEN_REF() { return GetToken(ANTLRv4Parser.TOKEN_REF, 0); }
            public IdentifierContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_identifier; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.EnterIdentifier(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IANTLRv4ParserListener typedListener = listener as IANTLRv4ParserListener;
                if (typedListener != null) typedListener.ExitIdentifier(this);
            }
        }

        [RuleVersion(0)]
        public IdentifierContext identifier()
        {
            IdentifierContext _localctx = new IdentifierContext(Context, State);
            EnterRule(_localctx, 126, RULE_identifier);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 641;
                    _la = TokenStream.LA(1);
                    if (!(_la == TOKEN_REF || _la == RULE_REF))
                    {
                        ErrorHandler.RecoverInline(this);
                    }
                    else
                    {
                        ErrorHandler.ReportMatch(this);
                        Consume();
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                ErrorHandler.ReportError(this, re);
                ErrorHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        private static char[] _serializedATN = {
        '\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
        '\x5964', '\x3', '?', '\x286', '\x4', '\x2', '\t', '\x2', '\x4', '\x3',
        '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4',
        '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b',
        '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v',
        '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t',
        '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4',
        '\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t',
        '\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4',
        '\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t',
        '\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4',
        '\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t',
        '\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4',
        ' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4',
        '#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&',
        '\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')',
        '\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t',
        ',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/',
        '\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32',
        '\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34',
        '\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37',
        '\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39',
        '\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4',
        '=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@',
        '\t', '@', '\x4', '\x41', '\t', '\x41', '\x3', '\x2', '\a', '\x2', '\x84',
        '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x87', '\v', '\x2', '\x3', '\x2',
        '\x3', '\x2', '\a', '\x2', '\x8B', '\n', '\x2', '\f', '\x2', '\xE', '\x2',
        '\x8E', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x92',
        '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x95', '\v', '\x2', '\x3', '\x2',
        '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3',
        '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4',
        '\x5', '\x4', '\xA2', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3',
        '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xA9', '\n', '\x5',
        '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
        '\a', '\x6', '\xB0', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xB3', '\v',
        '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a',
        '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xBE',
        '\n', '\b', '\f', '\b', '\xE', '\b', '\xC1', '\v', '\b', '\x3', '\b',
        '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xC6', '\n', '\b', '\x3', '\t',
        '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xCC', '\n', '\t',
        '\f', '\t', '\xE', '\t', '\xCF', '\v', '\t', '\x3', '\t', '\x3', '\t',
        '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5',
        '\n', '\xD8', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5',
        '\v', '\xDD', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3',
        '\f', '\x3', '\f', '\x5', '\f', '\xE4', '\n', '\f', '\x3', '\f', '\x3',
        '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xEB', '\n',
        '\r', '\f', '\r', '\xE', '\r', '\xEE', '\v', '\r', '\x3', '\r', '\x5',
        '\r', '\xF1', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3',
        '\xE', '\x5', '\xE', '\xF7', '\n', '\xE', '\x3', '\xE', '\x3', '\xE',
        '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF',
        '\xFF', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x103',
        '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x106', '\v', '\x10', '\x3',
        '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x10C',
        '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x10F', '\v', '\x11', '\x3',
        '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3',
        '\x12', '\a', '\x12', '\x117', '\n', '\x12', '\f', '\x12', '\xE', '\x12',
        '\x11A', '\v', '\x12', '\x3', '\x13', '\a', '\x13', '\x11D', '\n', '\x13',
        '\f', '\x13', '\xE', '\x13', '\x120', '\v', '\x13', '\x3', '\x14', '\x3',
        '\x14', '\x5', '\x14', '\x124', '\n', '\x14', '\x3', '\x15', '\a', '\x15',
        '\x127', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x12A', '\v', '\x15',
        '\x3', '\x15', '\x5', '\x15', '\x12D', '\n', '\x15', '\x3', '\x15', '\x3',
        '\x15', '\x5', '\x15', '\x131', '\n', '\x15', '\x3', '\x15', '\x5', '\x15',
        '\x134', '\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x137', '\n', '\x15',
        '\x3', '\x15', '\x5', '\x15', '\x13A', '\n', '\x15', '\x3', '\x15', '\a',
        '\x15', '\x13D', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x140', '\v',
        '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3',
        '\x15', '\x3', '\x16', '\a', '\x16', '\x148', '\n', '\x16', '\f', '\x16',
        '\xE', '\x16', '\x14B', '\v', '\x16', '\x3', '\x16', '\x5', '\x16', '\x14E',
        '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17',
        '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19',
        '\x5', '\x19', '\x159', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3',
        '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a',
        '\x1B', '\x162', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x165', '\v',
        '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3',
        '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x6', '\x1E', '\x16F',
        '\n', '\x1E', '\r', '\x1E', '\xE', '\x1E', '\x170', '\x3', '\x1F', '\x3',
        '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\a',
        '!', '\x17A', '\n', '!', '\f', '!', '\xE', '!', '\x17D', '\v', '!', '\x3',
        '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x182', '\n', '\"', '\x3',
        '#', '\a', '#', '\x185', '\n', '#', '\f', '#', '\xE', '#', '\x188', '\v',
        '#', '\x3', '#', '\x5', '#', '\x18B', '\n', '#', '\x3', '#', '\x3', '#',
        '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '%',
        '\x3', '%', '\x3', '%', '\a', '%', '\x197', '\n', '%', '\f', '%', '\xE',
        '%', '\x19A', '\v', '%', '\x3', '&', '\x3', '&', '\x5', '&', '\x19E',
        '\n', '&', '\x3', '&', '\x5', '&', '\x1A1', '\n', '&', '\x3', '\'', '\x6',
        '\'', '\x1A4', '\n', '\'', '\r', '\'', '\xE', '\'', '\x1A5', '\x3', '(',
        '\x3', '(', '\x5', '(', '\x1AA', '\n', '(', '\x3', '(', '\x3', '(', '\x5',
        '(', '\x1AE', '\n', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x1B2',
        '\n', '(', '\x3', '(', '\x3', '(', '\x5', '(', '\x1B6', '\n', '(', '\x5',
        '(', '\x1B8', '\n', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')',
        '\x5', ')', '\x1BE', '\n', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3',
        '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x1C8',
        '\n', '+', '\f', '+', '\xE', '+', '\x1CB', '\v', '+', '\x3', ',', '\x3',
        ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x1D3',
        '\n', ',', '\x3', '-', '\x3', '-', '\x5', '-', '\x1D7', '\n', '-', '\x3',
        '.', '\x3', '.', '\x5', '.', '\x1DB', '\n', '.', '\x3', '/', '\x3', '/',
        '\x3', '/', '\a', '/', '\x1E0', '\n', '/', '\f', '/', '\xE', '/', '\x1E3',
        '\v', '/', '\x3', '\x30', '\x5', '\x30', '\x1E6', '\n', '\x30', '\x3',
        '\x30', '\x6', '\x30', '\x1E9', '\n', '\x30', '\r', '\x30', '\xE', '\x30',
        '\x1EA', '\x3', '\x30', '\x5', '\x30', '\x1EE', '\n', '\x30', '\x3', '\x31',
        '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x1F3', '\n', '\x31', '\x3',
        '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x1F8', '\n', '\x31',
        '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x1FD', '\n',
        '\x31', '\x5', '\x31', '\x1FF', '\n', '\x31', '\x3', '\x32', '\x3', '\x32',
        '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x205', '\n', '\x32', '\x3',
        '\x33', '\x3', '\x33', '\x5', '\x33', '\x209', '\n', '\x33', '\x3', '\x34',
        '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x20F', '\n',
        '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x213', '\n', '\x35',
        '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x217', '\n', '\x35', '\x5',
        '\x35', '\x219', '\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36',
        '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x221', '\n',
        '\x36', '\x5', '\x36', '\x223', '\n', '\x36', '\x3', '\x37', '\x3', '\x37',
        '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x22A', '\n',
        '\x37', '\x5', '\x37', '\x22C', '\n', '\x37', '\x3', '\x38', '\x3', '\x38',
        '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x232', '\n', '\x38', '\x3',
        '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\a', '\x39', '\x238',
        '\n', '\x39', '\f', '\x39', '\xE', '\x39', '\x23B', '\v', '\x39', '\x3',
        '\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\x5', ':', '\x241', '\n',
        ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x245', '\n', ':', '\x3', ':',
        '\x3', ':', '\x5', ':', '\x249', '\n', ':', '\x3', ';', '\x3', ';', '\x5',
        ';', '\x24D', '\n', ';', '\x3', ';', '\a', ';', '\x250', '\n', ';', '\f',
        ';', '\xE', ';', '\x253', '\v', ';', '\x3', ';', '\x5', ';', '\x256',
        '\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<',
        '\x5', '<', '\x25D', '\n', '<', '\x3', '<', '\x5', '<', '\x260', '\n',
        '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3',
        '>', '\x5', '>', '\x268', '\n', '>', '\x3', '>', '\x3', '>', '\x5', '>',
        '\x26C', '\n', '>', '\x5', '>', '\x26E', '\n', '>', '\x3', '?', '\x3',
        '?', '\x3', '?', '\x3', '?', '\a', '?', '\x274', '\n', '?', '\f', '?',
        '\xE', '?', '\x277', '\v', '?', '\x3', '?', '\x3', '?', '\x3', '@', '\x3',
        '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x280', '\n', '@',
        '\x5', '@', '\x282', '\n', '@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41',
        '\x2', '\x2', '\x42', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10',
        '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$',
        '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':',
        '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T',
        'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l',
        'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x2', '\x5', '\x4',
        '\x2', '\x12', '\x12', '\x16', '\x18', '\x4', '\x2', '*', '*', '-', '-',
        '\x3', '\x2', '\x3', '\x4', '\x2', '\x2AD', '\x2', '\x85', '\x3', '\x2',
        '\x2', '\x2', '\x4', '\x98', '\x3', '\x2', '\x2', '\x2', '\x6', '\xA1',
        '\x3', '\x2', '\x2', '\x2', '\b', '\xA8', '\x3', '\x2', '\x2', '\x2',
        '\n', '\xAA', '\x3', '\x2', '\x2', '\x2', '\f', '\xB6', '\x3', '\x2',
        '\x2', '\x2', '\xE', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x10', '\xC7',
        '\x3', '\x2', '\x2', '\x2', '\x12', '\xD7', '\x3', '\x2', '\x2', '\x2',
        '\x14', '\xD9', '\x3', '\x2', '\x2', '\x2', '\x16', '\xE0', '\x3', '\x2',
        '\x2', '\x2', '\x18', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xF2',
        '\x3', '\x2', '\x2', '\x2', '\x1C', '\xFE', '\x3', '\x2', '\x2', '\x2',
        '\x1E', '\x100', '\x3', '\x2', '\x2', '\x2', ' ', '\x109', '\x3', '\x2',
        '\x2', '\x2', '\"', '\x112', '\x3', '\x2', '\x2', '\x2', '$', '\x11E',
        '\x3', '\x2', '\x2', '\x2', '&', '\x123', '\x3', '\x2', '\x2', '\x2',
        '(', '\x128', '\x3', '\x2', '\x2', '\x2', '*', '\x149', '\x3', '\x2',
        '\x2', '\x2', ',', '\x14F', '\x3', '\x2', '\x2', '\x2', '.', '\x153',
        '\x3', '\x2', '\x2', '\x2', '\x30', '\x158', '\x3', '\x2', '\x2', '\x2',
        '\x32', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x34', '\x15D', '\x3', '\x2',
        '\x2', '\x2', '\x36', '\x166', '\x3', '\x2', '\x2', '\x2', '\x38', '\x169',
        '\x3', '\x2', '\x2', '\x2', ':', '\x16E', '\x3', '\x2', '\x2', '\x2',
        '<', '\x172', '\x3', '\x2', '\x2', '\x2', '>', '\x174', '\x3', '\x2',
        '\x2', '\x2', '@', '\x176', '\x3', '\x2', '\x2', '\x2', '\x42', '\x17E',
        '\x3', '\x2', '\x2', '\x2', '\x44', '\x186', '\x3', '\x2', '\x2', '\x2',
        '\x46', '\x191', '\x3', '\x2', '\x2', '\x2', 'H', '\x193', '\x3', '\x2',
        '\x2', '\x2', 'J', '\x1A0', '\x3', '\x2', '\x2', '\x2', 'L', '\x1A3',
        '\x3', '\x2', '\x2', '\x2', 'N', '\x1B7', '\x3', '\x2', '\x2', '\x2',
        'P', '\x1B9', '\x3', '\x2', '\x2', '\x2', 'R', '\x1BF', '\x3', '\x2',
        '\x2', '\x2', 'T', '\x1C3', '\x3', '\x2', '\x2', '\x2', 'V', '\x1D2',
        '\x3', '\x2', '\x2', '\x2', 'X', '\x1D6', '\x3', '\x2', '\x2', '\x2',
        'Z', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\\', '\x1DC', '\x3', '\x2',
        '\x2', '\x2', '^', '\x1ED', '\x3', '\x2', '\x2', '\x2', '`', '\x1FE',
        '\x3', '\x2', '\x2', '\x2', '\x62', '\x200', '\x3', '\x2', '\x2', '\x2',
        '\x64', '\x206', '\x3', '\x2', '\x2', '\x2', '\x66', '\x20A', '\x3', '\x2',
        '\x2', '\x2', 'h', '\x218', '\x3', '\x2', '\x2', '\x2', 'j', '\x222',
        '\x3', '\x2', '\x2', '\x2', 'l', '\x22B', '\x3', '\x2', '\x2', '\x2',
        'n', '\x231', '\x3', '\x2', '\x2', '\x2', 'p', '\x233', '\x3', '\x2',
        '\x2', '\x2', 'r', '\x248', '\x3', '\x2', '\x2', '\x2', 't', '\x24A',
        '\x3', '\x2', '\x2', '\x2', 'v', '\x25A', '\x3', '\x2', '\x2', '\x2',
        'x', '\x261', '\x3', '\x2', '\x2', '\x2', 'z', '\x26D', '\x3', '\x2',
        '\x2', '\x2', '|', '\x26F', '\x3', '\x2', '\x2', '\x2', '~', '\x281',
        '\x3', '\x2', '\x2', '\x2', '\x80', '\x283', '\x3', '\x2', '\x2', '\x2',
        '\x82', '\x84', '\a', '\x6', '\x2', '\x2', '\x83', '\x82', '\x3', '\x2',
        '\x2', '\x2', '\x84', '\x87', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83',
        '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2',
        '\x86', '\x88', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2',
        '\x2', '\x2', '\x88', '\x8C', '\x5', '\x4', '\x3', '\x2', '\x89', '\x8B',
        '\x5', '\b', '\x5', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2',
        '\x8B', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2',
        '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F',
        '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2',
        '\x8F', '\x93', '\x5', '$', '\x13', '\x2', '\x90', '\x92', '\x5', '\"',
        '\x12', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x95',
        '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2',
        '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x96', '\x3', '\x2',
        '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97',
        '\a', '\x2', '\x2', '\x3', '\x97', '\x3', '\x3', '\x2', '\x2', '\x2',
        '\x98', '\x99', '\x5', '\x6', '\x4', '\x2', '\x99', '\x9A', '\x5', '\x80',
        '\x41', '\x2', '\x9A', '\x9B', '\a', '\"', '\x2', '\x2', '\x9B', '\x5',
        '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x13', '\x2', '\x2',
        '\x9D', '\xA2', '\a', '\x15', '\x2', '\x2', '\x9E', '\x9F', '\a', '\x14',
        '\x2', '\x2', '\x9F', '\xA2', '\a', '\x15', '\x2', '\x2', '\xA0', '\xA2',
        '\a', '\x15', '\x2', '\x2', '\xA1', '\x9C', '\x3', '\x2', '\x2', '\x2',
        '\xA1', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA0', '\x3', '\x2',
        '\x2', '\x2', '\xA2', '\a', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA9',
        '\x5', '\n', '\x6', '\x2', '\xA4', '\xA9', '\x5', '\x10', '\t', '\x2',
        '\xA5', '\xA9', '\x5', '\x14', '\v', '\x2', '\xA6', '\xA9', '\x5', '\x16',
        '\f', '\x2', '\xA7', '\xA9', '\x5', '\x1A', '\xE', '\x2', '\xA8', '\xA3',
        '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA4', '\x3', '\x2', '\x2', '\x2',
        '\xA8', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2',
        '\x2', '\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\t',
        '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', '\xE', '\x2', '\x2',
        '\xAB', '\xB1', '\a', '%', '\x2', '\x2', '\xAC', '\xAD', '\x5', '\f',
        '\a', '\x2', '\xAD', '\xAE', '\a', '\"', '\x2', '\x2', '\xAE', '\xB0',
        '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAC', '\x3', '\x2', '\x2', '\x2',
        '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2',
        '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4',
        '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2',
        '\xB4', '\xB5', '\a', '&', '\x2', '\x2', '\xB5', '\v', '\x3', '\x2', '\x2',
        '\x2', '\xB6', '\xB7', '\x5', '\x80', '\x41', '\x2', '\xB7', '\xB8', '\a',
        '*', '\x2', '\x2', '\xB8', '\xB9', '\x5', '\xE', '\b', '\x2', '\xB9',
        '\r', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBF', '\x5', '\x80', '\x41',
        '\x2', '\xBB', '\xBC', '\a', '\x32', '\x2', '\x2', '\xBC', '\xBE', '\x5',
        '\x80', '\x41', '\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBE',
        '\xC1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2',
        '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC6', '\x3',
        '\x2', '\x2', '\x2', '\xC1', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2',
        '\xC6', '\a', '\n', '\x2', '\x2', '\xC3', '\xC6', '\x5', '\x1E', '\x10',
        '\x2', '\xC4', '\xC6', '\a', '\t', '\x2', '\x2', '\xC5', '\xBA', '\x3',
        '\x2', '\x2', '\x2', '\xC5', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5',
        '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC4', '\x3', '\x2', '\x2',
        '\x2', '\xC6', '\xF', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a',
        '\x11', '\x2', '\x2', '\xC8', '\xCD', '\x5', '\x12', '\n', '\x2', '\xC9',
        '\xCA', '\a', '!', '\x2', '\x2', '\xCA', '\xCC', '\x5', '\x12', '\n',
        '\x2', '\xCB', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCF', '\x3',
        '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD',
        '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD0', '\x3', '\x2', '\x2',
        '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', '\a',
        '\"', '\x2', '\x2', '\xD1', '\x11', '\x3', '\x2', '\x2', '\x2', '\xD2',
        '\xD3', '\x5', '\x80', '\x41', '\x2', '\xD3', '\xD4', '\a', '*', '\x2',
        '\x2', '\xD4', '\xD5', '\x5', '\x80', '\x41', '\x2', '\xD5', '\xD8', '\x3',
        '\x2', '\x2', '\x2', '\xD6', '\xD8', '\x5', '\x80', '\x41', '\x2', '\xD7',
        '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2',
        '\x2', '\xD8', '\x13', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\a',
        '\xF', '\x2', '\x2', '\xDA', '\xDC', '\a', '%', '\x2', '\x2', '\xDB',
        '\xDD', '\x5', '\x18', '\r', '\x2', '\xDC', '\xDB', '\x3', '\x2', '\x2',
        '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3',
        '\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', '&', '\x2', '\x2', '\xDF',
        '\x15', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\a', '\x10', '\x2',
        '\x2', '\xE1', '\xE3', '\a', '%', '\x2', '\x2', '\xE2', '\xE4', '\x5',
        '\x18', '\r', '\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE3',
        '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2',
        '\x2', '\xE5', '\xE6', '\a', '&', '\x2', '\x2', '\xE6', '\x17', '\x3',
        '\x2', '\x2', '\x2', '\xE7', '\xEC', '\x5', '\x80', '\x41', '\x2', '\xE8',
        '\xE9', '\a', '!', '\x2', '\x2', '\xE9', '\xEB', '\x5', '\x80', '\x41',
        '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEE', '\x3',
        '\x2', '\x2', '\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC',
        '\xED', '\x3', '\x2', '\x2', '\x2', '\xED', '\xF0', '\x3', '\x2', '\x2',
        '\x2', '\xEE', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF1', '\a',
        '!', '\x2', '\x2', '\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF0',
        '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\x19', '\x3', '\x2', '\x2',
        '\x2', '\xF2', '\xF6', '\a', '\x33', '\x2', '\x2', '\xF3', '\xF4', '\x5',
        '\x1C', '\xF', '\x2', '\xF4', '\xF5', '\a', ' ', '\x2', '\x2', '\xF5',
        '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF3', '\x3', '\x2', '\x2',
        '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3',
        '\x2', '\x2', '\x2', '\xF8', '\xF9', '\x5', '\x80', '\x41', '\x2', '\xF9',
        '\xFA', '\x5', '\x1E', '\x10', '\x2', '\xFA', '\x1B', '\x3', '\x2', '\x2',
        '\x2', '\xFB', '\xFF', '\x5', '\x80', '\x41', '\x2', '\xFC', '\xFF', '\a',
        '\x13', '\x2', '\x2', '\xFD', '\xFF', '\a', '\x14', '\x2', '\x2', '\xFE',
        '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2',
        '\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x1D', '\x3',
        '\x2', '\x2', '\x2', '\x100', '\x104', '\a', '\r', '\x2', '\x2', '\x101',
        '\x103', '\a', '>', '\x2', '\x2', '\x102', '\x101', '\x3', '\x2', '\x2',
        '\x2', '\x103', '\x106', '\x3', '\x2', '\x2', '\x2', '\x104', '\x102',
        '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2',
        '\x105', '\x107', '\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3',
        '\x2', '\x2', '\x2', '\x107', '\x108', '\a', '<', '\x2', '\x2', '\x108',
        '\x1F', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10D', '\a', '\f', '\x2',
        '\x2', '\x10A', '\x10C', '\a', ';', '\x2', '\x2', '\x10B', '\x10A', '\x3',
        '\x2', '\x2', '\x2', '\x10C', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10D',
        '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2',
        '\x2', '\x10E', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D',
        '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\a', '\x39', '\x2', '\x2',
        '\x111', '!', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\a', '\x1E',
        '\x2', '\x2', '\x113', '\x114', '\x5', '\x80', '\x41', '\x2', '\x114',
        '\x118', '\a', '\"', '\x2', '\x2', '\x115', '\x117', '\x5', '\x44', '#',
        '\x2', '\x116', '\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x11A',
        '\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2',
        '\x118', '\x119', '\x3', '\x2', '\x2', '\x2', '\x119', '#', '\x3', '\x2',
        '\x2', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11D',
        '\x5', '&', '\x14', '\x2', '\x11C', '\x11B', '\x3', '\x2', '\x2', '\x2',
        '\x11D', '\x120', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3',
        '\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x11F',
        '%', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', '\x3', '\x2', '\x2',
        '\x2', '\x121', '\x124', '\x5', '(', '\x15', '\x2', '\x122', '\x124',
        '\x5', '\x44', '#', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2',
        '\x123', '\x122', '\x3', '\x2', '\x2', '\x2', '\x124', '\'', '\x3', '\x2',
        '\x2', '\x2', '\x125', '\x127', '\a', '\x6', '\x2', '\x2', '\x126', '\x125',
        '\x3', '\x2', '\x2', '\x2', '\x127', '\x12A', '\x3', '\x2', '\x2', '\x2',
        '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x3',
        '\x2', '\x2', '\x2', '\x129', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12A',
        '\x128', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12D', '\x5', ':', '\x1E',
        '\x2', '\x12C', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D',
        '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2',
        '\x12E', '\x130', '\a', '\x4', '\x2', '\x2', '\x12F', '\x131', '\x5',
        ' ', '\x11', '\x2', '\x130', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x130',
        '\x131', '\x3', '\x2', '\x2', '\x2', '\x131', '\x133', '\x3', '\x2', '\x2',
        '\x2', '\x132', '\x134', '\x5', '\x32', '\x1A', '\x2', '\x133', '\x132',
        '\x3', '\x2', '\x2', '\x2', '\x133', '\x134', '\x3', '\x2', '\x2', '\x2',
        '\x134', '\x136', '\x3', '\x2', '\x2', '\x2', '\x135', '\x137', '\x5',
        '\x34', '\x1B', '\x2', '\x136', '\x135', '\x3', '\x2', '\x2', '\x2', '\x136',
        '\x137', '\x3', '\x2', '\x2', '\x2', '\x137', '\x139', '\x3', '\x2', '\x2',
        '\x2', '\x138', '\x13A', '\x5', '\x36', '\x1C', '\x2', '\x139', '\x138',
        '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', '\x2',
        '\x13A', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13D', '\x5',
        '\x30', '\x19', '\x2', '\x13C', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13D',
        '\x140', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13C', '\x3', '\x2', '\x2',
        '\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x141',
        '\x3', '\x2', '\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', '\x2',
        '\x141', '\x142', '\a', '\x1F', '\x2', '\x2', '\x142', '\x143', '\x5',
        '>', ' ', '\x2', '\x143', '\x144', '\a', '\"', '\x2', '\x2', '\x144',
        '\x145', '\x5', '*', '\x16', '\x2', '\x145', ')', '\x3', '\x2', '\x2',
        '\x2', '\x146', '\x148', '\x5', ',', '\x17', '\x2', '\x147', '\x146',
        '\x3', '\x2', '\x2', '\x2', '\x148', '\x14B', '\x3', '\x2', '\x2', '\x2',
        '\x149', '\x147', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\x3',
        '\x2', '\x2', '\x2', '\x14A', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14B',
        '\x149', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14E', '\x5', '.', '\x18',
        '\x2', '\x14D', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E',
        '\x3', '\x2', '\x2', '\x2', '\x14E', '+', '\x3', '\x2', '\x2', '\x2',
        '\x14F', '\x150', '\a', '\x1C', '\x2', '\x2', '\x150', '\x151', '\x5',
        ' ', '\x11', '\x2', '\x151', '\x152', '\x5', '\x1E', '\x10', '\x2', '\x152',
        '-', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', '\a', '\x1D', '\x2',
        '\x2', '\x154', '\x155', '\x5', '\x1E', '\x10', '\x2', '\x155', '/', '\x3',
        '\x2', '\x2', '\x2', '\x156', '\x159', '\x5', '\n', '\x6', '\x2', '\x157',
        '\x159', '\x5', '\x38', '\x1D', '\x2', '\x158', '\x156', '\x3', '\x2',
        '\x2', '\x2', '\x158', '\x157', '\x3', '\x2', '\x2', '\x2', '\x159', '\x31',
        '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\a', '\x19', '\x2', '\x2',
        '\x15B', '\x15C', '\x5', ' ', '\x11', '\x2', '\x15C', '\x33', '\x3', '\x2',
        '\x2', '\x2', '\x15D', '\x15E', '\a', '\x1B', '\x2', '\x2', '\x15E', '\x163',
        '\x5', '\x80', '\x41', '\x2', '\x15F', '\x160', '\a', '!', '\x2', '\x2',
        '\x160', '\x162', '\x5', '\x80', '\x41', '\x2', '\x161', '\x15F', '\x3',
        '\x2', '\x2', '\x2', '\x162', '\x165', '\x3', '\x2', '\x2', '\x2', '\x163',
        '\x161', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2',
        '\x2', '\x164', '\x35', '\x3', '\x2', '\x2', '\x2', '\x165', '\x163',
        '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\a', '\x1A', '\x2', '\x2',
        '\x167', '\x168', '\x5', ' ', '\x11', '\x2', '\x168', '\x37', '\x3', '\x2',
        '\x2', '\x2', '\x169', '\x16A', '\a', '\x33', '\x2', '\x2', '\x16A', '\x16B',
        '\x5', '\x80', '\x41', '\x2', '\x16B', '\x16C', '\x5', '\x1E', '\x10',
        '\x2', '\x16C', '\x39', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16F',
        '\x5', '<', '\x1F', '\x2', '\x16E', '\x16D', '\x3', '\x2', '\x2', '\x2',
        '\x16F', '\x170', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16E', '\x3',
        '\x2', '\x2', '\x2', '\x170', '\x171', '\x3', '\x2', '\x2', '\x2', '\x171',
        ';', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\t', '\x2', '\x2',
        '\x2', '\x173', '=', '\x3', '\x2', '\x2', '\x2', '\x174', '\x175', '\x5',
        '@', '!', '\x2', '\x175', '?', '\x3', '\x2', '\x2', '\x2', '\x176', '\x17B',
        '\x5', '\x42', '\"', '\x2', '\x177', '\x178', '\a', '/', '\x2', '\x2',
        '\x178', '\x17A', '\x5', '\x42', '\"', '\x2', '\x179', '\x177', '\x3',
        '\x2', '\x2', '\x2', '\x17A', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17B',
        '\x179', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\x3', '\x2', '\x2',
        '\x2', '\x17C', '\x41', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17B',
        '\x3', '\x2', '\x2', '\x2', '\x17E', '\x181', '\x5', '^', '\x30', '\x2',
        '\x17F', '\x180', '\a', '\x34', '\x2', '\x2', '\x180', '\x182', '\x5',
        '\x80', '\x41', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x181',
        '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', '\x43', '\x3', '\x2', '\x2',
        '\x2', '\x183', '\x185', '\a', '\x6', '\x2', '\x2', '\x184', '\x183',
        '\x3', '\x2', '\x2', '\x2', '\x185', '\x188', '\x3', '\x2', '\x2', '\x2',
        '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\x3',
        '\x2', '\x2', '\x2', '\x187', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x188',
        '\x186', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18B', '\a', '\x12', '\x2',
        '\x2', '\x18A', '\x189', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B',
        '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\x3', '\x2', '\x2', '\x2',
        '\x18C', '\x18D', '\a', '\x3', '\x2', '\x2', '\x18D', '\x18E', '\a', '\x1F',
        '\x2', '\x2', '\x18E', '\x18F', '\x5', '\x46', '$', '\x2', '\x18F', '\x190',
        '\a', '\"', '\x2', '\x2', '\x190', '\x45', '\x3', '\x2', '\x2', '\x2',
        '\x191', '\x192', '\x5', 'H', '%', '\x2', '\x192', 'G', '\x3', '\x2',
        '\x2', '\x2', '\x193', '\x198', '\x5', 'J', '&', '\x2', '\x194', '\x195',
        '\a', '/', '\x2', '\x2', '\x195', '\x197', '\x5', 'J', '&', '\x2', '\x196',
        '\x194', '\x3', '\x2', '\x2', '\x2', '\x197', '\x19A', '\x3', '\x2', '\x2',
        '\x2', '\x198', '\x196', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199',
        '\x3', '\x2', '\x2', '\x2', '\x199', 'I', '\x3', '\x2', '\x2', '\x2',
        '\x19A', '\x198', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19D', '\x5',
        'L', '\'', '\x2', '\x19C', '\x19E', '\x5', 'T', '+', '\x2', '\x19D', '\x19C',
        '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2',
        '\x19E', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A1', '\x3',
        '\x2', '\x2', '\x2', '\x1A0', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x1A0',
        '\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A1', 'K', '\x3', '\x2', '\x2',
        '\x2', '\x1A2', '\x1A4', '\x5', 'N', '(', '\x2', '\x1A3', '\x1A2', '\x3',
        '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A5',
        '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A6', '\x3', '\x2', '\x2',
        '\x2', '\x1A6', 'M', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A9', '\x5',
        'P', ')', '\x2', '\x1A8', '\x1AA', '\x5', 'h', '\x35', '\x2', '\x1A9',
        '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\x3', '\x2', '\x2',
        '\x2', '\x1AA', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AD',
        '\x5', 'j', '\x36', '\x2', '\x1AC', '\x1AE', '\x5', 'h', '\x35', '\x2',
        '\x1AD', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x3',
        '\x2', '\x2', '\x2', '\x1AE', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1AF',
        '\x1B1', '\x5', 'R', '*', '\x2', '\x1B0', '\x1B2', '\x5', 'h', '\x35',
        '\x2', '\x1B1', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B2',
        '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B8', '\x3', '\x2', '\x2', '\x2',
        '\x1B3', '\x1B5', '\x5', '\x1E', '\x10', '\x2', '\x1B4', '\x1B6', '\a',
        '+', '\x2', '\x2', '\x1B5', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B5',
        '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B8', '\x3', '\x2', '\x2',
        '\x2', '\x1B7', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1AB',
        '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1AF', '\x3', '\x2', '\x2', '\x2',
        '\x1B7', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B8', 'O', '\x3', '\x2',
        '\x2', '\x2', '\x1B9', '\x1BA', '\x5', '\x80', '\x41', '\x2', '\x1BA',
        '\x1BD', '\t', '\x3', '\x2', '\x2', '\x1BB', '\x1BE', '\x5', 'j', '\x36',
        '\x2', '\x1BC', '\x1BE', '\x5', 'R', '*', '\x2', '\x1BD', '\x1BB', '\x3',
        '\x2', '\x2', '\x2', '\x1BD', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BE',
        'Q', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C0', '\a', '#', '\x2', '\x2',
        '\x1C0', '\x1C1', '\x5', 'H', '%', '\x2', '\x1C1', '\x1C2', '\a', '$',
        '\x2', '\x2', '\x1C2', 'S', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4',
        '\a', '\'', '\x2', '\x2', '\x1C4', '\x1C9', '\x5', 'V', ',', '\x2', '\x1C5',
        '\x1C6', '\a', '!', '\x2', '\x2', '\x1C6', '\x1C8', '\x5', 'V', ',', '\x2',
        '\x1C7', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1CB', '\x3',
        '\x2', '\x2', '\x2', '\x1C9', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C9',
        '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CA', 'U', '\x3', '\x2', '\x2',
        '\x2', '\x1CB', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD',
        '\x5', 'X', '-', '\x2', '\x1CD', '\x1CE', '\a', '#', '\x2', '\x2', '\x1CE',
        '\x1CF', '\x5', 'Z', '.', '\x2', '\x1CF', '\x1D0', '\a', '$', '\x2', '\x2',
        '\x1D0', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D3', '\x5',
        'X', '-', '\x2', '\x1D2', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1D2',
        '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D3', 'W', '\x3', '\x2', '\x2',
        '\x2', '\x1D4', '\x1D7', '\x5', '\x80', '\x41', '\x2', '\x1D5', '\x1D7',
        '\a', '\x1E', '\x2', '\x2', '\x1D6', '\x1D4', '\x3', '\x2', '\x2', '\x2',
        '\x1D6', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D7', 'Y', '\x3', '\x2',
        '\x2', '\x2', '\x1D8', '\x1DB', '\x5', '\x80', '\x41', '\x2', '\x1D9',
        '\x1DB', '\a', '\t', '\x2', '\x2', '\x1DA', '\x1D8', '\x3', '\x2', '\x2',
        '\x2', '\x1DA', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1DB', '[', '\x3',
        '\x2', '\x2', '\x2', '\x1DC', '\x1E1', '\x5', '^', '\x30', '\x2', '\x1DD',
        '\x1DE', '\a', '/', '\x2', '\x2', '\x1DE', '\x1E0', '\x5', '^', '\x30',
        '\x2', '\x1DF', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E3',
        '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1DF', '\x3', '\x2', '\x2', '\x2',
        '\x1E1', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E2', ']', '\x3', '\x2',
        '\x2', '\x2', '\x1E3', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E6',
        '\x5', '|', '?', '\x2', '\x1E5', '\x1E4', '\x3', '\x2', '\x2', '\x2',
        '\x1E5', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E8', '\x3',
        '\x2', '\x2', '\x2', '\x1E7', '\x1E9', '\x5', '`', '\x31', '\x2', '\x1E8',
        '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\x3', '\x2', '\x2',
        '\x2', '\x1EA', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB',
        '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1EE', '\x3', '\x2', '\x2', '\x2',
        '\x1EC', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1E5', '\x3',
        '\x2', '\x2', '\x2', '\x1ED', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EE',
        '_', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F2', '\x5', '\x62', '\x32',
        '\x2', '\x1F0', '\x1F3', '\x5', 'h', '\x35', '\x2', '\x1F1', '\x1F3',
        '\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1F0', '\x3', '\x2', '\x2', '\x2',
        '\x1F2', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1FF', '\x3',
        '\x2', '\x2', '\x2', '\x1F4', '\x1F7', '\x5', 'l', '\x37', '\x2', '\x1F5',
        '\x1F8', '\x5', 'h', '\x35', '\x2', '\x1F6', '\x1F8', '\x3', '\x2', '\x2',
        '\x2', '\x1F7', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F6',
        '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1FF', '\x3', '\x2', '\x2', '\x2',
        '\x1F9', '\x1FF', '\x5', '\x64', '\x33', '\x2', '\x1FA', '\x1FC', '\x5',
        '\x1E', '\x10', '\x2', '\x1FB', '\x1FD', '\a', '+', '\x2', '\x2', '\x1FC',
        '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FD', '\x3', '\x2', '\x2',
        '\x2', '\x1FD', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1EF',
        '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1F4', '\x3', '\x2', '\x2', '\x2',
        '\x1FE', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FA', '\x3',
        '\x2', '\x2', '\x2', '\x1FF', '\x61', '\x3', '\x2', '\x2', '\x2', '\x200',
        '\x201', '\x5', '\x80', '\x41', '\x2', '\x201', '\x204', '\t', '\x3',
        '\x2', '\x2', '\x202', '\x205', '\x5', 'l', '\x37', '\x2', '\x203', '\x205',
        '\x5', 't', ';', '\x2', '\x204', '\x202', '\x3', '\x2', '\x2', '\x2',
        '\x204', '\x203', '\x3', '\x2', '\x2', '\x2', '\x205', '\x63', '\x3',
        '\x2', '\x2', '\x2', '\x206', '\x208', '\x5', 't', ';', '\x2', '\x207',
        '\x209', '\x5', '\x66', '\x34', '\x2', '\x208', '\x207', '\x3', '\x2',
        '\x2', '\x2', '\x208', '\x209', '\x3', '\x2', '\x2', '\x2', '\x209', '\x65',
        '\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', '\x5', 'h', '\x35', '\x2',
        '\x20B', 'g', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20E', '\a', '+',
        '\x2', '\x2', '\x20D', '\x20F', '\a', '+', '\x2', '\x2', '\x20E', '\x20D',
        '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', '\x3', '\x2', '\x2', '\x2',
        '\x20F', '\x219', '\x3', '\x2', '\x2', '\x2', '\x210', '\x212', '\a',
        ',', '\x2', '\x2', '\x211', '\x213', '\a', '+', '\x2', '\x2', '\x212',
        '\x211', '\x3', '\x2', '\x2', '\x2', '\x212', '\x213', '\x3', '\x2', '\x2',
        '\x2', '\x213', '\x219', '\x3', '\x2', '\x2', '\x2', '\x214', '\x216',
        '\a', '.', '\x2', '\x2', '\x215', '\x217', '\a', '+', '\x2', '\x2', '\x216',
        '\x215', '\x3', '\x2', '\x2', '\x2', '\x216', '\x217', '\x3', '\x2', '\x2',
        '\x2', '\x217', '\x219', '\x3', '\x2', '\x2', '\x2', '\x218', '\x20C',
        '\x3', '\x2', '\x2', '\x2', '\x218', '\x210', '\x3', '\x2', '\x2', '\x2',
        '\x218', '\x214', '\x3', '\x2', '\x2', '\x2', '\x219', 'i', '\x3', '\x2',
        '\x2', '\x2', '\x21A', '\x223', '\x5', 'x', '=', '\x2', '\x21B', '\x223',
        '\x5', 'z', '>', '\x2', '\x21C', '\x223', '\x5', 'n', '\x38', '\x2', '\x21D',
        '\x223', '\a', '\x5', '\x2', '\x2', '\x21E', '\x220', '\a', '\x32', '\x2',
        '\x2', '\x21F', '\x221', '\x5', '|', '?', '\x2', '\x220', '\x21F', '\x3',
        '\x2', '\x2', '\x2', '\x220', '\x221', '\x3', '\x2', '\x2', '\x2', '\x221',
        '\x223', '\x3', '\x2', '\x2', '\x2', '\x222', '\x21A', '\x3', '\x2', '\x2',
        '\x2', '\x222', '\x21B', '\x3', '\x2', '\x2', '\x2', '\x222', '\x21C',
        '\x3', '\x2', '\x2', '\x2', '\x222', '\x21D', '\x3', '\x2', '\x2', '\x2',
        '\x222', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x223', 'k', '\x3', '\x2',
        '\x2', '\x2', '\x224', '\x22C', '\x5', 'z', '>', '\x2', '\x225', '\x22C',
        '\x5', 'v', '<', '\x2', '\x226', '\x22C', '\x5', 'n', '\x38', '\x2', '\x227',
        '\x229', '\a', '\x32', '\x2', '\x2', '\x228', '\x22A', '\x5', '|', '?',
        '\x2', '\x229', '\x228', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22A',
        '\x3', '\x2', '\x2', '\x2', '\x22A', '\x22C', '\x3', '\x2', '\x2', '\x2',
        '\x22B', '\x224', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x225', '\x3',
        '\x2', '\x2', '\x2', '\x22B', '\x226', '\x3', '\x2', '\x2', '\x2', '\x22B',
        '\x227', '\x3', '\x2', '\x2', '\x2', '\x22C', 'm', '\x3', '\x2', '\x2',
        '\x2', '\x22D', '\x22E', '\a', '\x35', '\x2', '\x2', '\x22E', '\x232',
        '\x5', 'r', ':', '\x2', '\x22F', '\x230', '\a', '\x35', '\x2', '\x2',
        '\x230', '\x232', '\x5', 'p', '\x39', '\x2', '\x231', '\x22D', '\x3',
        '\x2', '\x2', '\x2', '\x231', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x232',
        'o', '\x3', '\x2', '\x2', '\x2', '\x233', '\x234', '\a', '#', '\x2', '\x2',
        '\x234', '\x239', '\x5', 'r', ':', '\x2', '\x235', '\x236', '\a', '/',
        '\x2', '\x2', '\x236', '\x238', '\x5', 'r', ':', '\x2', '\x237', '\x235',
        '\x3', '\x2', '\x2', '\x2', '\x238', '\x23B', '\x3', '\x2', '\x2', '\x2',
        '\x239', '\x237', '\x3', '\x2', '\x2', '\x2', '\x239', '\x23A', '\x3',
        '\x2', '\x2', '\x2', '\x23A', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23B',
        '\x239', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', '\a', '$', '\x2',
        '\x2', '\x23D', 'q', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x240', '\a',
        '\x3', '\x2', '\x2', '\x23F', '\x241', '\x5', '|', '?', '\x2', '\x240',
        '\x23F', '\x3', '\x2', '\x2', '\x2', '\x240', '\x241', '\x3', '\x2', '\x2',
        '\x2', '\x241', '\x249', '\x3', '\x2', '\x2', '\x2', '\x242', '\x244',
        '\a', '\n', '\x2', '\x2', '\x243', '\x245', '\x5', '|', '?', '\x2', '\x244',
        '\x243', '\x3', '\x2', '\x2', '\x2', '\x244', '\x245', '\x3', '\x2', '\x2',
        '\x2', '\x245', '\x249', '\x3', '\x2', '\x2', '\x2', '\x246', '\x249',
        '\x5', 'x', '=', '\x2', '\x247', '\x249', '\a', '\x5', '\x2', '\x2', '\x248',
        '\x23E', '\x3', '\x2', '\x2', '\x2', '\x248', '\x242', '\x3', '\x2', '\x2',
        '\x2', '\x248', '\x246', '\x3', '\x2', '\x2', '\x2', '\x248', '\x247',
        '\x3', '\x2', '\x2', '\x2', '\x249', 's', '\x3', '\x2', '\x2', '\x2',
        '\x24A', '\x255', '\a', '#', '\x2', '\x2', '\x24B', '\x24D', '\x5', '\n',
        '\x6', '\x2', '\x24C', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D',
        '\x3', '\x2', '\x2', '\x2', '\x24D', '\x251', '\x3', '\x2', '\x2', '\x2',
        '\x24E', '\x250', '\x5', '\x38', '\x1D', '\x2', '\x24F', '\x24E', '\x3',
        '\x2', '\x2', '\x2', '\x250', '\x253', '\x3', '\x2', '\x2', '\x2', '\x251',
        '\x24F', '\x3', '\x2', '\x2', '\x2', '\x251', '\x252', '\x3', '\x2', '\x2',
        '\x2', '\x252', '\x254', '\x3', '\x2', '\x2', '\x2', '\x253', '\x251',
        '\x3', '\x2', '\x2', '\x2', '\x254', '\x256', '\a', '\x1F', '\x2', '\x2',
        '\x255', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', '\x3',
        '\x2', '\x2', '\x2', '\x256', '\x257', '\x3', '\x2', '\x2', '\x2', '\x257',
        '\x258', '\x5', '\\', '/', '\x2', '\x258', '\x259', '\a', '$', '\x2',
        '\x2', '\x259', 'u', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25C', '\a',
        '\x4', '\x2', '\x2', '\x25B', '\x25D', '\x5', ' ', '\x11', '\x2', '\x25C',
        '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2',
        '\x2', '\x25D', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x260',
        '\x5', '|', '?', '\x2', '\x25F', '\x25E', '\x3', '\x2', '\x2', '\x2',
        '\x25F', '\x260', '\x3', '\x2', '\x2', '\x2', '\x260', 'w', '\x3', '\x2',
        '\x2', '\x2', '\x261', '\x262', '\a', '\n', '\x2', '\x2', '\x262', '\x263',
        '\a', '\x31', '\x2', '\x2', '\x263', '\x264', '\a', '\n', '\x2', '\x2',
        '\x264', 'y', '\x3', '\x2', '\x2', '\x2', '\x265', '\x267', '\a', '\x3',
        '\x2', '\x2', '\x266', '\x268', '\x5', '|', '?', '\x2', '\x267', '\x266',
        '\x3', '\x2', '\x2', '\x2', '\x267', '\x268', '\x3', '\x2', '\x2', '\x2',
        '\x268', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x269', '\x26B', '\a',
        '\n', '\x2', '\x2', '\x26A', '\x26C', '\x5', '|', '?', '\x2', '\x26B',
        '\x26A', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\x3', '\x2', '\x2',
        '\x2', '\x26C', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x265',
        '\x3', '\x2', '\x2', '\x2', '\x26D', '\x269', '\x3', '\x2', '\x2', '\x2',
        '\x26E', '{', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x270', '\a', '(',
        '\x2', '\x2', '\x270', '\x275', '\x5', '~', '@', '\x2', '\x271', '\x272',
        '\a', '!', '\x2', '\x2', '\x272', '\x274', '\x5', '~', '@', '\x2', '\x273',
        '\x271', '\x3', '\x2', '\x2', '\x2', '\x274', '\x277', '\x3', '\x2', '\x2',
        '\x2', '\x275', '\x273', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276',
        '\x3', '\x2', '\x2', '\x2', '\x276', '\x278', '\x3', '\x2', '\x2', '\x2',
        '\x277', '\x275', '\x3', '\x2', '\x2', '\x2', '\x278', '\x279', '\a',
        ')', '\x2', '\x2', '\x279', '}', '\x3', '\x2', '\x2', '\x2', '\x27A',
        '\x282', '\x5', '\x80', '\x41', '\x2', '\x27B', '\x27C', '\x5', '\x80',
        '\x41', '\x2', '\x27C', '\x27F', '\a', '*', '\x2', '\x2', '\x27D', '\x280',
        '\x5', '\x80', '\x41', '\x2', '\x27E', '\x280', '\a', '\n', '\x2', '\x2',
        '\x27F', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x27E', '\x3',
        '\x2', '\x2', '\x2', '\x280', '\x282', '\x3', '\x2', '\x2', '\x2', '\x281',
        '\x27A', '\x3', '\x2', '\x2', '\x2', '\x281', '\x27B', '\x3', '\x2', '\x2',
        '\x2', '\x282', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x283', '\x284',
        '\t', '\x4', '\x2', '\x2', '\x284', '\x81', '\x3', '\x2', '\x2', '\x2',
        'W', '\x85', '\x8C', '\x93', '\xA1', '\xA8', '\xB1', '\xBF', '\xC5', '\xCD',
        '\xD7', '\xDC', '\xE3', '\xEC', '\xF0', '\xF6', '\xFE', '\x104', '\x10D',
        '\x118', '\x11E', '\x123', '\x128', '\x12C', '\x130', '\x133', '\x136',
        '\x139', '\x13E', '\x149', '\x14D', '\x158', '\x163', '\x170', '\x17B',
        '\x181', '\x186', '\x18A', '\x198', '\x19D', '\x1A0', '\x1A5', '\x1A9',
        '\x1AD', '\x1B1', '\x1B5', '\x1B7', '\x1BD', '\x1C9', '\x1D2', '\x1D6',
        '\x1DA', '\x1E1', '\x1E5', '\x1EA', '\x1ED', '\x1F2', '\x1F7', '\x1FC',
        '\x1FE', '\x204', '\x208', '\x20E', '\x212', '\x216', '\x218', '\x220',
        '\x222', '\x229', '\x22B', '\x231', '\x239', '\x240', '\x244', '\x248',
        '\x24C', '\x251', '\x255', '\x25C', '\x25F', '\x267', '\x26B', '\x26D',
        '\x275', '\x27F', '\x281',
    };

        public static readonly ATN _ATN =
            new ATNDeserializer().Deserialize(_serializedATN);


    }
}